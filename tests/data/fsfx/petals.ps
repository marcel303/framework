include fsfx/common.inc

int numPetals = 16;
int numInputs = numPetals/2;
int hoverIndex = int(time * 32.0) % numPetals;

const float PI = 3.1415926535897932384626433832795;
const float PI2 = PI * 2.0;
const float PI2_RCP = 1.0 / PI2;

#define ANIMTIME (time / 100.0)
//#define ANIMTIME 0.0

struct DistanceInfo
{
	float sdf;
	int socketIndex;
	int socketType;
	bool selected;
};

DistanceInfo computeDistance(vec2 p)
{
	float size = mix(0.5, 1.0, (cos(time / 11.0) + 1.0) * 0.5);

	float distance = length(p) / size;
	float angle = mod(atan(p.x, p.y) + PI + ANIMTIME, PI2);

	int petalIndex = int(floor(angle * numPetals * PI2_RCP));

	float petalValue = pow((cos(angle * numPetals) + 1.0) * 0.5, 0.3);

	float petalRadius = mix(1.0 - 1.0 / numPetals, 1.0, petalValue);

	DistanceInfo di;
	di.sdf = petalRadius - distance;
	di.socketIndex = petalIndex;
	di.socketType = petalIndex < numInputs ? 0 : 1;
	di.selected = petalIndex == hoverIndex;
	return di;
}

vec4 fsfx()
{
	vec2 colormapSize = textureSize(colormap, 0);
	vec2 colormapSizeRcp = 1.f / colormapSize;
	
	vec2 coord = texcoord;
	coord -= vec2(0.5);
	coord *= 2.0;
	coord.x *= colormapSize.x / colormapSize.y;

	DistanceInfo di = computeDistance(coord);

	float r = smoothstep(-1.0, +1.0, di.sdf * colormapSize.y * 0.5);

	vec3 color = vec3(r, di.socketIndex / float(numPetals), -di.sdf);
	//color = vec3(r, 0.0, 0.0);
	//color = vec3(di.sdf);

	if (di.socketType == 0)
		color *= 0.5;
	if (di.selected)
		color += vec3(0.5);

	return vec4(color, 1.0);
}
