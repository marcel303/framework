include engine/ShaderPS.txt

// todo : merge position and velocity textures
uniform sampler2D p;

uniform sampler2D flowfield;

uniform float drag;
uniform vec2 grav_pos;

uniform float grav_force;
uniform float flow_strength;

uniform vec4 bounds;
uniform float applyBounds;

shader_in vec2 texcoord;

void main()
{
	vec4 positionAndVelocity = texture(p, texcoord);
	vec2 position = positionAndVelocity.xy;
	vec2 velocity = positionAndVelocity.zw;

	// apply gravitational force

	vec2 delta = grav_pos - position;
	velocity += normalize(delta) / length(delta) * grav_force;

	// apply flowfield acceleration

// todo : include time step
	vec2 flow = texture(flowfield, position / textureSize(flowfield, 0)).xy;
	velocity += flow * flow_strength;

	velocity *= drag;

	if (applyBounds != 0.0)
	{
		// apply bounds constaint

		vec2 min = bounds.xy;
		vec2 max = bounds.zw;

		if (position.x < min.x)
			velocity.x = +abs(velocity.x);
		if (position.y < min.y)
			velocity.y = +abs(velocity.y);
		if (position.x > max.x)
			velocity.x = -abs(velocity.x);
		if (position.y > max.y)
			velocity.y = -abs(velocity.y);
	}

	position += velocity;
	
	shader_fragColor = vec4(position, velocity);
}