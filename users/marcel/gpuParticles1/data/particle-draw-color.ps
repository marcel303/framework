include engine/ShaderPS.txt

shader_in vec2 v_velocity;
shader_in vec2 v_texcoord;
shader_in float v_index;

void main()
{
	// opacity dependent upon velocity
	float velocity_mag = length(v_velocity);
	float opacity = pow(min(1.0, velocity_mag / 2.0), 1.0);

	// create a circular silhouette
	vec2 d = v_texcoord * 2.0 - vec2(1.0);
	float d_mag = length(d);
	opacity *= smoothstep(1.0, 0.8, d_mag);

	vec3 color = vec3(0.0);

	// calculate lighting
	{
		float nz = sqrt(1.0 - dot(d, d));
		vec3 n = vec3(d, nz);

		vec3 light_dir = normalize(vec3(-1, -1, 0.7));

		float light = max(0.0, dot(light_dir, n));

		light += 0.01;

	#if 1
		vec3 light_color;
		light_color.r = 0.1 * velocity_mag;
		light_color.g = 0.2 * velocity_mag;
		light_color.b = 1.0 * velocity_mag;
	#else
		vec3 light_color =
			v_index < 4000
			? vec3(1.0, 1.0, 0.2)
			: v_index < 8000
			? vec3(0.6, 0.6, 1.0)
			: vec3(1.0, 0.2, 1.0);
	#endif
		light_color = pow(light_color, vec3(2.2));

		color += light * light_color;
	}

	color = pow(color, vec3(1.0 / 2.2));

	shader_fragColor = vec4(color, opacity);
}
