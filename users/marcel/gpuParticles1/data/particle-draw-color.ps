include engine/ShaderPS.txt

uniform vec4 baseColor;

shader_in vec2 v_velocity;
shader_in vec2 v_texcoord;
shader_in float v_index;

void main()
{
	// opacity dependent upon velocity
	float velocity_mag = length(v_velocity);
	float opacity = pow(min(1.0, velocity_mag / 2.0), 1.0);

	// create a circular silhouette
	vec2 d = v_texcoord * 2.0 - vec2(1.0);
	float d_mag = length(d);
	opacity *= smoothstep(1.0, 0.8, d_mag);

	vec3 color = pow(baseColor.rgb, vec3(2.2));

	vec3 light = vec3(0.0);

	// calculate lighting
	{
		float nz = sqrt(1.0 - dot(d, d));
		vec3 n = vec3(d, nz);

		vec3 light_dir = normalize(vec3(-1, -1, 0.7));

		float light_intensity = max(0.0, dot(light_dir, n));

		light_intensity += 0.01;

		vec3 light_color = vec3(velocity_mag);
		
		light_color = pow(light_color, vec3(2.2));

		light += light_color * light_intensity;
	}

	color *= light;

	color = pow(color, vec3(1.0 / 2.2));

	opacity *= baseColor.a;

	shader_fragColor = vec4(color, opacity);
}
