include engine/ShaderPS.txt
include engine/ShaderUtil.txt

// shader based on: https://github.com/SaschaWillems/Vulkan-glTF-PBR/blob/master/data/shaders/pbr.frag

include gltf/materials/pbr-metallicRoughness.txt

// scene common
#define kLightType_Directional 0.0
#define kLightType_Point       1.0
uniform vec4 scene_lightParams1;
uniform vec4 scene_lightParams2;
uniform vec3 scene_ambientLightColor;

// from vertex shader
shader_in vec3 v_position_view;
shader_in vec4 v_color;
shader_in vec2 v_texcoord0;
shader_in vec2 v_texcoord1;
shader_in vec3 v_normal_view;

void main()
{
    // -- prepare surface properties

    Lighting_SurfaceProperties surfaceProperties = prepareSurfaceProperties(
        v_position_view,
        normalize(v_normal_view),
        v_color,
        v_texcoord0,
        v_texcoord1,
        true);

    // -- compute lighting

    vec3 color = vec3(0.0);

    {
        vec3 lightDir;
        float lightAttenuation;

        if (scene_lightParams1.w == kLightType_Directional)
        {
            lightDir = scene_lightParams1.xyz;
            lightAttenuation = 1.0;
        }
        else
        {
            vec3 lightPos = scene_lightParams1.xyz;
            vec3 lightToSurface = surfaceProperties.position - lightPos;
            lightDir = normalize(lightToSurface);
            lightAttenuation = 1.0 / dot(lightToSurface, lightToSurface);
        }

        Lighting_LightingResult lightingResult = computeLighting(
            surfaceProperties,
            lightDir);

        // -- attenuate light color and add

        vec3 attenuatedLightColor =
            scene_lightParams2.xyz *
            (scene_lightParams2.w * lightAttenuation * lightingResult.lightIncidence);

        color += (lightingResult.specular + lightingResult.diffuse) * attenuatedLightColor;
    }

    // -- add ambient light

    vec3 ambient = scene_ambientLightColor;
    ambient *= surfaceProperties.baseColor;
    ambient *= gltfAmbientOcclusion();

    color += ambient;

    // -- add emissive

    color += gltfEmissive();

    // -- convert linear to gamma space

    color = linearToSrgb(color);

    // -- store

    shader_fragColor = vec4(color, surfaceProperties.opacity);

    shader_fragNormal = vec4(surfaceProperties.N, 0.0);
}
