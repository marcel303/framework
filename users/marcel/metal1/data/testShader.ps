include ShaderPS.txt
include ShaderUtil.txt

uniform vec4 params;
uniform sampler2D source;

shader_in vec4 v_color;
shader_in vec3 v_normal;
shader_in vec2 v_texcoord0;

void main()
{
	vec4 result = v_color;

	// color clamp

	if (params.w != 0.0)
	{
		result = clamp(result, vec4(0.0), vec4(1.0));
	}

	// texture
	
	if (params.x != 0.0)
	{
		vec4 texColor = texture(source, v_texcoord0);
		
		/*
		COLOR_MUL,
		COLOR_ADD,
		COLOR_SUB,
		COLOR_IGNORE
		*/
		
		if (params.y == 0.0)
		{
			result.rgb = result.rgb * texColor.rgb;
			result.a   = result.a   * texColor.a;
		}
		else if (params.y == 1.0)
		{
			result.rgb = result.rgb + texColor.rgb;
			result.a   = result.a   * texColor.a;
		}
		else if (params.y == 2.0)
		{
			result.rgb = result.rgb - texColor.rgb;
			result.a   = result.a   * texColor.a;
		}
		else if (params.y == 3.0)
		{
			result.rgb = texColor.rgb;
			result.a   = texColor.a;
		}
	}

	// color post

	result = applyColorPost(result, params.z);

	shader_fragColor = result;
	shader_fragNormal = vec4(v_normal, 0.0);
}
