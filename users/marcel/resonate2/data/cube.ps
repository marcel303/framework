include engine/ShaderPS.txt

uniform samplerCube cubemap;

shader_in vec3 normal;

void main()
{
	vec3 texcoord = normal;

	vec4 color = texture(cubemap, texcoord);

#if 1
	float direction[3];
	direction[0] = normal.x;
	direction[1] = normal.y;
	direction[2] = normal.z;

	float absDirection[3];
	absDirection[0] = abs(normal.x);
	absDirection[1] = abs(normal.y);
	absDirection[2] = abs(normal.z);
	
	int majorAxis = 0;
	
	if (absDirection[1] > absDirection[majorAxis])
		majorAxis = 1;
	if (absDirection[2] > absDirection[majorAxis])
		majorAxis = 2;

	int cubeFaceIndex = majorAxis * 2 + (direction[majorAxis] < 0 ? 1 : 0);
	
	vec3 overlay = vec3(0.0);

	overlay.b += (cubeFaceIndex + 1) / 6.0;
	//overlay.g += cubeFaceIndex == 2 ? 0.5 : 0.0;
	//overlay.g += majorAxis == 1 ? 0.5 : 0.0;

	//overlay.g = (cubeFaceIndex + 1) / 6.0;

	//color.rgb = mix(color.rgb, overlay, vec3(0.8));
#endif

	//if (majorAxis == 1)
	//	color = texture(cubemap, vec3(texcoord.x, -texcoord.y, -texcoord.z));

	//shader_fragColor = vec4(normalize(normal) + vec3(1.0 / sqrt(3.0)), 1.0);
	shader_fragColor = color;
}
