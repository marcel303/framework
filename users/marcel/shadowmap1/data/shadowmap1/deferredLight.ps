include engine/ShaderPS.txt
include shadowmap1/shadowUtils.txt

#define DEBUG 0

uniform sampler2D depthTexture;
uniform mat4x4 projectionToWorld;

uniform sampler2D normalTexture;

uniform mat4x4 lightMVP;
uniform vec3 lightColor;

shader_in vec2 texcoord;

void main()
{
    float camera_view_depth = texture(depthTexture, texcoord).x;
    
    if (camera_view_depth == 1.0)
    {
        // scene background
        shader_fragColor = vec4(0.0);
        return;
    }
    
    vec3 position_world = depthToWorldPosition(camera_view_depth, texcoord, projectionToWorld);
    vec4 position_lightSpace = lightMVP * vec4(position_world, 1.0);
    
    if (position_lightSpace.w <= 0.0)
    {
        // facing in the other direction
        shader_fragColor = vec4(0.0);
        return;
    }
    
    vec3 projected = position_lightSpace.xyz / position_lightSpace.w;
    vec3 coords = projected * 0.5 + vec3(0.5);

    // apply a bit of lighting here
    
    shader_fragColor.rgb = lightColor;
    
    // attenuation
    
    float distanceXY = length(projected.xy);
    float distanceZ = max(0.0, coords.z); // todo : is this correct ?
// todo : make curve value a uniform
    float curveValue = 0.5;
    shader_fragColor.rgb *= pow(max(0.0, 1.0 - distanceXY), curveValue) * max(0.0, 1.0 - distanceZ);
    
    //
    
    shader_fragColor.a = 1.0; // has to be 1.0 because BLEND_ADD multiplies the rgb with this value before addition
}
