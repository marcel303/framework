include engine/ShaderPS.txt
include engine/ShaderUtil.txt

// shader based on: https://github.com/SaschaWillems/Vulkan-glTF-PBR/blob/master/data/shaders/pbr.frag

uniform sampler2D baseColorTexture;
uniform sampler2D normalTexture;
uniform sampler2D occlusionTexture;
uniform sampler2D metallicTexture;
uniform sampler2D emissiveTexture;

uniform vec3 scene_camPos;

uniform vec4 material_baseColorFactor;
uniform float material_hasBaseColorTexture;
uniform float material_hasMetallicRoughnessTexture;
uniform float material_hasNormalTexture;
uniform float material_hasOcclusionTexture;
uniform float material_hasEmissiveTexture;
uniform float material_metallicFactor;
uniform float material_roughnessFactor;
uniform float material_alphaMask;
uniform float material_alphaMaskCutoff;

shader_in vec3 v_position_world;
shader_in vec2 v_texcoord0;
shader_in vec2 v_texcoord1;
shader_in vec3 v_normal;

vec3 ALBEDO;

#define PI 3.1415926535897932384626433832795
//#define ALBEDO pow(texture(baseColorTexture, v_texcoord0).rgb, vec3(2.2))


// Normal Distribution function --------------------------------------
float D_GGX(float dotNH, float roughness)
{
    float alpha = roughness * roughness;
    float alpha2 = alpha * alpha;
    float denom = dotNH * dotNH * (alpha2 - 1.0) + 1.0;
    return (alpha2)/(PI * denom*denom); 
}

// Geometric Shadowing function --------------------------------------
float G_SchlicksmithGGX(float dotNL, float dotNV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;
    float GL = dotNL / (dotNL * (1.0 - k) + k);
    float GV = dotNV / (dotNV * (1.0 - k) + k);
    return GL * GV;
}

// Fresnel function ----------------------------------------------------
vec3 F_Schlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}
vec3 F_SchlickR(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);
}

vec3 specularContribution(vec3 L, vec3 V, vec3 N, vec3 F0, float metallic, float roughness)
{
    // Precalculate vectors and dot products    
    vec3 H = normalize (V + L);
    float dotNH = clamp(dot(N, H), 0.0, 1.0);
    float dotNV = clamp(dot(N, V), 0.0, 1.0);
    float dotNL = clamp(dot(N, L), 0.0, 1.0);

    // Light color fixed
    vec3 lightColor = vec3(1.0);

    vec3 color = vec3(0.0);

    if (dotNL > 0.0) {
        // D = Normal distribution (Distribution of the microfacets)
        float D = D_GGX(dotNH, roughness); 
        // G = Geometric shadowing term (Microfacets shadowing)
        float G = G_SchlicksmithGGX(dotNL, dotNV, roughness);
        // F = Fresnel factor (Reflectance depending on angle of incidence)
        vec3 F = F_Schlick(dotNV, F0);      
        vec3 spec = D * F * G / (4.0 * dotNL * dotNV + 0.001);      
        vec3 kD = (vec3(1.0) - F) * (1.0 - metallic);           
        color += (kD * ALBEDO / PI + spec) * dotNL;
    }

    return color;
}

// See http://www.thetenthplanet.de/archives/1180
vec3 perturbNormal()
{
    vec3 tangentNormal = texture(normalTexture, v_texcoord0).xyz * 2.0 - 1.0;

    vec3 q1 = dFdx(v_position_world);
    vec3 q2 = dFdy(v_position_world);
    vec2 st1 = dFdx(v_texcoord0);
    vec2 st2 = dFdy(v_texcoord0);

    vec3 N = normalize(v_normal);
    vec3 T = normalize(q1 * st2.t - q2 * st1.t);
    vec3 B = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);

    return normalize(TBN * tangentNormal);
}

void main()
{
    vec4 baseColor = texture(baseColorTexture, v_texcoord0) * material_baseColorFactor;

    if (material_alphaMask != 0.0)
    {
        if (baseColor.a < material_alphaMaskCutoff)
            discard;
    }

    ALBEDO = pow(baseColor.rgb, vec3(2.2));

    vec3 scene_lightDir = normalize(vec3(1.0, 1.0, 1.0));
    float scene_gamma = 2.2;

    vec3 N = (material_hasNormalTexture == 1.0f) ? perturbNormal() : normalize(v_normal);
    vec3 V = normalize(scene_camPos - v_position_world);
    vec3 R = -normalize(reflect(V, N));

    float metallic = material_metallicFactor;
    float roughness = material_roughnessFactor;
    if (material_hasMetallicRoughnessTexture == 1.0f) {
        metallic *= texture(metallicTexture, v_texcoord0).b;
        roughness *= clamp(texture(metallicTexture, v_texcoord0).g, 0.04, 1.0);
    }

    vec3 F0 = vec3(0.04); 
    F0 = mix(F0, ALBEDO, metallic);

    vec3 L = normalize(scene_lightDir.xyz);
    vec3 Lo = specularContribution(L, V, N, F0, metallic, roughness);

    vec2 brdf = vec2(0.0);
    vec3 reflection = vec3(0.5);//prefilteredReflection(R, roughness).rgb;
    vec3 irradiance = vec3(0.5);

    // Diffuse based on irradiance
    vec3 diffuse = irradiance * ALBEDO;

    vec3 F = F_SchlickR(max(dot(N, V), 0.0), F0, roughness);

    // Specular reflectance
    vec3 specular = reflection * (F * brdf.x + brdf.y);

    // Ambient part
    vec3 kD = 1.0 - F;
    kD *= 1.0 - metallic; // fixme
    float ao = (material_hasOcclusionTexture == 1.0f) ? texture(occlusionTexture, v_texcoord1).r : 1.0f;
    vec3 ambient = (kD * diffuse + specular) * ao;
    vec3 color = ambient + Lo * 10.0; // fixme : don't x10

    // Gamma correction
    color = pow(color, vec3(1.0f / scene_gamma));

    if (material_hasEmissiveTexture == 1.0f) {
        vec3 emissive = texture(emissiveTexture, v_texcoord0).rgb;// * u_EmissiveFactor;
        color += emissive;
    }

    //color.rgb = R.rgb;

    shader_fragColor = vec4(color, baseColor.a);
}
