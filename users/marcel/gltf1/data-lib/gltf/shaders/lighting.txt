#define PI 3.1415926535897932384626433832795

// --- Normal Distribution function ---

float D_GGX(float NdotH, float roughness)
{
    float alpha = roughness * roughness;
    float alpha2 = alpha * alpha;
    float denom = NdotH * NdotH * (alpha2 - 1.0) + 1.0;
    return alpha2 / (PI * denom*denom); 
}

// --- Geometric Shadowing function ---

float G_SchlicksmithGGX(float NdotL, float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;
    float GL = NdotL / (NdotL * (1.0 - k) + k);
    float GV = NdotV / (NdotV * (1.0 - k) + k);
    return GL * GV;
}

// --- Fresnel function ---

vec3 F_Schlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}
vec3 F_SchlickR(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);
}

// --- specular model ---

vec3 specularContribution(vec3 L, vec3 V, vec3 N, vec3 F0, vec3 metallic, float roughness, vec3 baseColor)
{
    // Precalculate vectors and dot products    
    vec3 H = normalize (V + L);
    float NdotH = clamp(dot(N, H), 0.0, 1.0);
    float NdotV = clamp(dot(N, V), 0.0, 1.0);
    float NdotL = clamp(dot(N, L), 0.0, 1.0);

    vec3 color = vec3(0.0);

    if (NdotL > 0.0) {
        // D = Normal distribution (Distribution of the microfacets)
        float D = D_GGX(NdotH, roughness); 
        // G = Geometric shadowing term (Microfacets shadowing)
        float G = G_SchlicksmithGGX(NdotL, NdotV, roughness);
        // F = Fresnel factor (Reflectance depending on angle of incidence)
        vec3 F = F_Schlick(NdotV, F0);      
        vec3 spec = D * F * G / (4.0 * NdotL * NdotV + 0.001);      
        vec3 kD = (vec3(1.0) - F) * (vec3(1.0) - metallic);           
        color += (kD * baseColor / PI + spec) * NdotL;
    }

    return color;
}

#undef PI
