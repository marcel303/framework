#define PI 3.1415926535897932384626433832795

// --- Normal Distribution function ---

float D_GGX(float NdotH, float roughness)
{
    float alpha = roughness * roughness;
    float alpha2 = alpha * alpha;
    float denom = NdotH * NdotH * (alpha2 - 1.0) + 1.0;
    return alpha2 / (PI * denom*denom); 
}

// --- Geometric Shadowing function ---

float G_SchlicksmithGGX(float NdotL, float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;
    float GL = NdotL / (NdotL * (1.0 - k) + k);
    float GV = NdotV / (NdotV * (1.0 - k) + k);
    return GL * GV;
}

// --- Fresnel function ---

vec3 F_Schlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}
vec3 F_SchlickR(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);
}

// --- specular model ---

vec3 specularContribution(vec3 L, vec3 V, vec3 N, vec3 F0, vec3 metallic, float roughness, vec3 baseColor)
{
    // Precalculate vectors and dot products    
    vec3 H = normalize (V + L);
    float NdotH = clamp(dot(N, H), 0.0, 1.0);
    float NdotV = clamp(dot(N, V), 0.0, 1.0);
    float NdotL = clamp(dot(N, L), 0.0, 1.0);

    vec3 color = vec3(0.0);

    if (NdotL > 0.0) {
        // D = Normal distribution (Distribution of the microfacets)
        float D = D_GGX(NdotH, roughness); 
        // G = Geometric shadowing term (Microfacets shadowing)
        float G = G_SchlicksmithGGX(NdotL, NdotV, roughness);
        // F = Fresnel factor (Reflectance depending on angle of incidence)
        vec3 F = F_Schlick(NdotV, F0);      
        vec3 spec = D * F * G / (4.0 * NdotL * NdotV + 0.001);      
        vec3 kD = (vec3(1.0) - F) * (vec3(1.0) - metallic);           
        color += (kD * baseColor / PI + spec) * NdotL;
    }

    return color;
}

#undef PI

// --- lighting computation ---

#define kLightType_Directional 0
#define kLightType_Point       1

struct Lighting_SurfaceProperties
{
    // surface vectors

    vec3 position;
    
    vec3 N;
    vec3 V;
    vec3 R;

    // material properties

    vec3 baseColor;
    vec3 metallic;
    float roughness;
};

struct Lighting_LightProperties
{
    float type;
    vec3 positionOrDirection;
};

struct Lighting_LightingResult
{
    vec3 diffuse;
    vec3 specular;
};

Lighting_LightingResult computeLighting(Lighting_SurfaceProperties surfaceProperties, Lighting_LightProperties lightProperties)
{
    vec3 lightDir;
    float lightAttenuation;

    if (lightProperties.type == 0.0)
    {
        lightDir = lightProperties.positionOrDirection;
        lightAttenuation = 1.0;
    }
    else
    {
        vec3 lightPos = lightProperties.positionOrDirection;

        vec3 lightToSurface = surfaceProperties.position - lightPos;
        lightDir = normalize(lightToSurface);
        lightAttenuation = 1.0 / dot(lightToSurface, lightToSurface);
    }

    // -- specular

    vec3 F0 = mix(vec3(0.04), surfaceProperties.baseColor, surfaceProperties.metallic);

    vec3 L = -lightDir;

    vec3 Lo = specularContribution(
        L,
        surfaceProperties.V,
        surfaceProperties.N,
        F0,
        surfaceProperties.metallic,
        surfaceProperties.roughness,
        surfaceProperties.baseColor);

    // -- diffuse

    vec3 F = F_SchlickR(max(0.0, dot(surfaceProperties.N, surfaceProperties.V)), F0, surfaceProperties.roughness);

    vec3 kD = vec3(1.0) - F;

    {
        // for energy conservation: reduce diffuse by how reflective the material is

        vec3 specular = surfaceProperties.metallic;
        float specularStrength = max(specular.r, max(specular.g, specular.b));

        kD *= 1.0 - specularStrength;
    }
    
    vec3 diffuse = kD * surfaceProperties.baseColor;

    diffuse *= max(0.0, dot(surfaceProperties.N, L));

    // -- attenuation

    Lo *= lightAttenuation;
    diffuse *= lightAttenuation;

    // -- result

    Lighting_LightingResult result;
    result.specular = Lo;
    result.diffuse = diffuse;

    return result;
}
