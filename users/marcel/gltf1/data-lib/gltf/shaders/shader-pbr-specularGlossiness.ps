include engine/ShaderPS.txt
include engine/ShaderUtil.txt

include gltf/shaders/lighting.txt
include gltf/shaders/normal-mapping-utils.txt

// shader based on: https://github.com/SaschaWillems/Vulkan-glTF-PBR/blob/master/data/shaders/pbr.frag

include gltf/shaders/material-pbr-specularGlossiness.txt

// scene common
uniform vec4 scene_lightParams1;
uniform vec4 scene_lightParams2;
uniform vec3 scene_ambientLightColor;

// from vertex shader
shader_in vec3 v_position_view;
shader_in vec4 v_color;
shader_in vec2 v_texcoord0;
shader_in vec2 v_texcoord1;
shader_in vec3 v_normal_view;

void main()
{
    // -- prepare surface properties

    Lighting_SurfaceProperties surfaceProperties = prepareSurfaceProperties(
        v_position_view,
        normalize(v_normal_view),
        v_color,
        v_texcoord0,
        v_texcoord1,
        true);

    // -- compute lighting

    vec3 Lo = vec3(0.0);
    vec3 diffuse = vec3(0.0);

    {
        Lighting_LightProperties lightProperties;
        lightProperties.type = scene_lightParams1.w;
        lightProperties.positionOrDirection = scene_lightParams1.xyz;

        Lighting_LightingResult lightingResult = computeLighting(surfaceProperties, lightProperties);

        vec3 lightColor = scene_lightParams2.xyz * scene_lightParams2.w;
        Lo += lightingResult.specular * lightColor;
        diffuse += lightingResult.diffuse * lightColor;
    }

    // -- add all terms

    vec3 color = diffuse + Lo;

    // -- add ambient light

// todo : use lighting model to compute ambient contribution
    vec3 ambient = scene_ambientLightColor;
    ambient *= surfaceProperties.baseColor;
    ambient *= gltfAmbientOcclusion();

    color += ambient;

    // -- add emissive

    color += gltfEmissive();

    // -- convert linear to gamma space

    color = linearToSrgb(color);

    // -- store

    //color.rgb = gltfTexture(diffuseTexture, diffuseTextureCoord).rgb;
    //color.rgb = u_diffuseFactor.rgb;
    //color.rgb = linearToSrgb(baseColor.rgb);
    //color.rgb = R;
    //color.rgb = vec3(glossiness);
    //color.rgb = N;
    //color.rgb = specular;

    shader_fragColor = vec4(color, surfaceProperties.opacity);

#if 0 // todo : use temporal or dither based alpha offset to improve the blending result we get when using the alpha to coverage method
    // Iestyn's RGB dither (7 asm instructions) from Portal 2 X360, slightly modified for VR
    vec2 sampleCoord = v_texcoord0 * 1231541.0;
    vec3 vDither = vec3( dot( vec2( 171.0, 231.0 ), sampleCoord ) );
    vDither = fract( vDither / vec3( 103.0, 71.0, 97.0 ) );
    shader_fragColor.a += (vDither.r - 0.5) / 8.0;
#endif
}
