include engine/ShaderPS.txt
include engine/ShaderUtil.txt

// shader based on: https://github.com/SaschaWillems/Vulkan-glTF-PBR/blob/master/data/shaders/pbr.frag

// material maps

uniform vec4 material_baseColorFactor;
uniform sampler2D baseColorTexture;

uniform float material_metallicFactor;
uniform float material_roughnessFactor;
uniform sampler2D metallicRoughnessTexture;

uniform float material_hasBaseColorTexture;
uniform float material_hasMetallicRoughnessTexture;

// additional maps

uniform sampler2D normalTexture;

uniform sampler2D occlusionTexture;

uniform vec3 material_emissiveFactor;
uniform sampler2D emissiveTexture;

uniform float material_hasNormalTexture;
uniform float material_occlusionStrength;
uniform float material_hasOcclusionTexture;
uniform float material_hasEmissiveTexture;

// material common
uniform float material_alphaMask;
uniform float material_alphaMaskCutoff;

// scene common
uniform vec3 scene_camPos;
uniform vec3 scene_lightDir;

// from vertex shader
shader_in vec3 v_position_view;
shader_in vec4 v_color;
shader_in vec2 v_texcoord0;
shader_in vec2 v_texcoord1;
shader_in vec3 v_normal_view;

#define PI 3.1415926535897932384626433832795
#define kMinRoughness 0.04

float scene_gamma = 2.2;

vec3 ALBEDO;

// Normal Distribution function --------------------------------------
float D_GGX(float NdotH, float roughness)
{
    float alpha = roughness * roughness;
    float alpha2 = alpha * alpha;
    float denom = NdotH * NdotH * (alpha2 - 1.0) + 1.0;
    return alpha2 / (PI * denom*denom); 
}

// Geometric Shadowing function --------------------------------------
float G_SchlicksmithGGX(float NdotL, float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;
    float GL = NdotL / (NdotL * (1.0 - k) + k);
    float GV = NdotV / (NdotV * (1.0 - k) + k);
    return GL * GV;
}

// Fresnel function ----------------------------------------------------
vec3 F_Schlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}
vec3 F_SchlickR(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);
}

vec3 specularContribution(vec3 L, vec3 V, vec3 N, vec3 F0, float metallic, float roughness)
{
    // Precalculate vectors and dot products    
    vec3 H = normalize (V + L);
    float NdotH = clamp(dot(N, H), 0.0, 1.0);
    float NdotV = clamp(dot(N, V), 0.0, 1.0);
    float NdotL = clamp(dot(N, L), 0.0, 1.0);

    vec3 color = vec3(0.0);

    if (NdotL > 0.0) {
        // D = Normal distribution (Distribution of the microfacets)
        float D = D_GGX(NdotH, roughness); 
        // G = Geometric shadowing term (Microfacets shadowing)
        float G = G_SchlicksmithGGX(NdotL, NdotV, roughness);
        // F = Fresnel factor (Reflectance depending on angle of incidence)
        vec3 F = F_Schlick(NdotV, F0);      
        vec3 spec = D * F * G / (4.0 * NdotL * NdotV + 0.001);      
        vec3 kD = (vec3(1.0) - F) * (1.0 - metallic);           
        color += (kD * ALBEDO / PI + spec) * NdotL;
    }

    return color;
}

// See http://www.thetenthplanet.de/archives/1180
vec3 perturbNormal()
{
    if (material_hasNormalTexture == 0.0)
        return normalize(v_normal_view);
        
    vec3 tangentNormal = texture(normalTexture, v_texcoord0).xyz * 2.0 - 1.0;

    vec3 q1 = dFdx(v_position_view);
    vec3 q2 = dFdy(v_position_view);
    vec2 st1 = dFdx(v_texcoord0);
    vec2 st2 = dFdy(v_texcoord0);

    vec3 N = normalize(v_normal_view);
    vec3 T = normalize(q1 * st2.y - q2 * st1.y);
    vec3 B = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);

    return normalize(TBN * tangentNormal);
}

void main()
{
    // -- unpack base color and alpha

    vec4 baseColor = material_baseColorFactor;

    if (material_hasBaseColorTexture != 0.0)
    {
        vec4 baseColorFromTexture = texture(baseColorTexture, v_texcoord0);

        /*
        The baseColorTexture uses the sRGB transfer function and must be converted to
        linear space before it is used for any computations.
        */

        baseColorFromTexture.rgb = pow(baseColorFromTexture.rgb, vec3(2.2));

        baseColor *= baseColorFromTexture;
    }
    else
    {
    // todo : need a way to set default values for vertex inputs
    //        otherwise meshes without vertex colors get random data

        /*
        if a primitive specifies a vertex color using the attribute semantic
        property COLOR_0, then this value acts as an additional linear multiplier
        to baseColor.
        */

        //baseColor *= v_color;
    }

    // -- perform alpha test

    if (material_alphaMask != 0.0)
    {
        if (baseColor.a < material_alphaMaskCutoff)
            discard;
    }

    ALBEDO = baseColor.rgb;

    // -- calculate light vectors

    vec3 N = perturbNormal();
    vec3 V = normalize(scene_camPos - v_position_view);
    vec3 R = -normalize(reflect(V, N));

    // -- unpack metallic and roughness

    float metallic = material_metallicFactor;
    float roughness = material_roughnessFactor;
    
    if (material_hasMetallicRoughnessTexture != 0.0)
    {
        vec4 metallicRoughness = texture(metallicRoughnessTexture, v_texcoord0);

        metallic *= metallicRoughness.b;
        roughness *= metallicRoughness.g;
    }

    roughness = clamp(roughness, kMinRoughness, 1.0);

    // -- specular

    vec3 F0 = mix(vec3(0.04), ALBEDO, metallic);

    vec3 L = normalize(scene_lightDir.xyz);
    vec3 Lo = specularContribution(L, V, N, F0, metallic, roughness);

    // -- diffuse

    vec3 diffuse = ALBEDO;

    vec3 F = F_SchlickR(max(dot(N, V), 0.0), F0, roughness);

    vec3 kD = vec3(1.0) - F;
    
    kD *= 1.0 - metallic;
    
    vec3 ambient = kD * diffuse;

    // -- ambient occlusion
    
    if (material_hasOcclusionTexture != 0.0)
    {
    // todo : for some models this is assumed to be v_texcoord0, for others, v_texcoord1
    //        how to distinguish between them ?
    
        float ao = texture(occlusionTexture, v_texcoord0).r;

        ao = mix(1.0, ao, material_occlusionStrength);

        ambient *= ao;
    }

    // -- specular reflectance

    vec3 specularReflection = metallic * F;

    ambient += specularReflection;

    // -- add all terms

    vec3 color = ambient + Lo;

    // -- convert linear to gamma space

    color = pow(color, vec3(1.0 / scene_gamma));

    // -- add emissive

    vec3 emissive = material_emissiveFactor;

    if (material_hasEmissiveTexture != 0.0)
    {
        emissive *= texture(emissiveTexture, v_texcoord0).rgb;
    }

    color += emissive;

    // -- store

//    color.rgb = R;
//    color.rgb = vec3(metallic);
//    color.rgb = vec3(roughness);
    //color.rgb = N;
//    color.rgb = material_baseColorFactor.rgb;
    //color.rgb = vec3(material_metallicFactor);
    //color.rgb = vec3(material_roughnessFactor);

    shader_fragColor = vec4(color, baseColor.a);
}
