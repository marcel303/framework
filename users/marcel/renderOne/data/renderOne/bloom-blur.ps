include engine/ShaderPS.txt

uniform sampler2D source;

shader_in vec2 texcoord;

void main()
{
	// weights calculated using:
	// http://dev.theomader.com/gaussian-kernel-calculator/
#if !defined(__METAL_VERSION__)
	float gaussianKernel[5*5] = float[](
#else
	float gaussianKernel[5*5] = {
#endif
		0.01767,  0.030501, 0.036587, 0.030501, 0.01767,
		0.030501, 0.052649, 0.063154, 0.052649, 0.030501,
		0.036587, 0.063154, 0.075755, 0.063154, 0.036587,
		0.030501, 0.052649, 0.063154, 0.052649, 0.030501,
		0.01767,  0.030501, 0.036587, 0.030501, 0.01767
#if !defined(__METAL_VERSION__)
	);
#else
	};
#endif

	vec3 sum = vec3(0.0);

#define SUM_ROW(y) \
	{ \
		vec3 value1 = textureOffset(source, texcoord, ivec2(-2, y)).rgb * gaussianKernel[(y + 2) * 5 + 0]; \
		vec3 value2 = textureOffset(source, texcoord, ivec2(-1, y)).rgb * gaussianKernel[(y + 2) * 5 + 1]; \
		vec3 value3 = textureOffset(source, texcoord, ivec2( 0, y)).rgb * gaussianKernel[(y + 2) * 5 + 2]; \
		vec3 value4 = textureOffset(source, texcoord, ivec2(+1, y)).rgb * gaussianKernel[(y + 2) * 5 + 3]; \
		vec3 value5 = textureOffset(source, texcoord, ivec2(+2, y)).rgb * gaussianKernel[(y + 2) * 5 + 4]; \
		vec3 value = (value1 + value2) + value3 + (value4 + value5); \
		sum += value; \
	}

	SUM_ROW(-2);
	SUM_ROW(-1);
	SUM_ROW( 0);
	SUM_ROW(+1);
	SUM_ROW(+2);

	shader_fragColor = vec4(sum, 1.0);
}