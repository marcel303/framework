uniform sampler3D lightVolume;
uniform sampler2D lightIds;
uniform float worldToVolumeScale;
uniform float infiniteSpaceMode;

#if !defined(__METAL_VERSION__)
	void forEachLightId(int id);
#endif

ivec2 rOne_toIvec2(vec2 v)
{
	return ivec2(
		int(v.x),
		int(v.y));
}

ivec2 rOne_toIvec2(ivec2 v)
{
	return v;
}

ivec3 rOne_toIvec3(vec3 v)
{
	return ivec3(
		int(v.x),
		int(v.y),
		int(v.z));
}

ivec3 rOne_toIvec3(ivec3 v)
{
	return v;
}

void forEachLightIdAt(vec3 in_position)
{
	vec3 position = in_position * worldToVolumeScale;
	
	ivec3 lightVolumeDims = rOne_toIvec3(textureSize(lightVolume, 0));

	// position to cell coord

	int x = int(floor(position.x));
	int y = int(floor(position.y));
	int z = int(floor(position.z));

	x += (lightVolumeDims.x - 1) / 2;
	y += (lightVolumeDims.y - 1) / 2;
	z += (lightVolumeDims.z - 1) / 2;

	if (infiniteSpaceMode == 0.0)
	{
		if (x < 0 || x >= lightVolumeDims.x ||
			y < 0 || y >= lightVolumeDims.y ||
			z < 0 || z >= lightVolumeDims.z)
		{
			return;
		}
	}
	else
	{
		x = x % lightVolumeDims.x;
		y = y % lightVolumeDims.y;
		z = z % lightVolumeDims.z;

		if (x < 0) x += lightVolumeDims.x;
		if (y < 0) y += lightVolumeDims.y;
		if (z < 0) z += lightVolumeDims.z;
	}

	ivec2 startOffsetAndCount = rOne_toIvec2(texelFetch(lightVolume, ivec3(x, y, z), 0).xy);

	int startOffset = startOffsetAndCount.x;
	int count = startOffsetAndCount.y;

	for (int i = 0; i < count; ++i)
	{
		int index = startOffset + i;

		int u = index & 4095;
		int v = index >> 12;

		int id = int(texelFetch(lightIds, ivec2(u, v), 0).x);

		forEachLightId(id);
	}

	int i_numGlobalLights = int(numGlobalLights);

	for (int i = 0; i < i_numGlobalLights; ++i)
	{
		int id = i;

		forEachLightId(id);
	}
}
