// with physically based lighting, each light should be treated as extending into infinity,
// as the (inverse square) attenuation factor will never truely reach zero. for performance
// reasons, we'd like to limit the range of lights however, so one possible solution is to
// come up with a windowing function which fades out the light at a set maximum distance,
// while at the same time attempting not to affect the intensity/energy of the light too
// much. Karis13 proposed the below windowing function, which will dampen the energy more
// near the outer radius of the light, while approximating the true interse-square
// intensity of the light nearby
// --> I tried to find a direct link to the paper I got this strategy from, but couldn't
//     find it (anymore). When you search for 'Karis13' plenty of interesting papers and
//     presentations pop up though!
float caculateInverseSquareWithWindowingFunction(float distanceSquared, float lightRadiusSquared)
{
    float normalizedDistance = distanceSquared / lightRadiusSquared;

    float t = max(0.0, 1.0 - normalizedDistance * normalizedDistance);

    return (t * t) / max(distanceSquared, 1.0 /* todo : add parameter for distance clamp ..*/);
}

float computeAttenuationForPointLight(
	vec3 surfacePosition,
	vec3 lightPosition,
	float lightRadius)
{
	vec3 lightToSurface = surfacePosition - lightPosition;

	float distanceSquared = dot(lightToSurface, lightToSurface);

	float lightRadiusSquared = lightRadius * lightRadius;

	if (distanceSquared >= lightRadiusSquared)
	{
		return 0.0;
	}
	else
	{
		float attenuation = caculateInverseSquareWithWindowingFunction(
			distanceSquared,
			lightRadiusSquared);

		return attenuation;
	}
}

float computeAttenuationForSpotLight(
	vec3 surfacePosition,
	vec3 spotPosition,
	vec3 spotDirection,
	float spotAngleAlpha, // cos(spotAngle/2)
	float lightRadius)
{
	float distance =
		dot(surfacePosition, spotDirection) -
		dot(spotPosition, spotDirection);

	if (distance <= 0.0 || distance >= lightRadius)
	{
		return 0.0;
	}
	else
	{
		vec3 lightToSurface = surfacePosition - spotPosition;

		float cosAngle = dot(spotDirection, normalize(lightToSurface));

		float attenuation = max(0.0, cosAngle - spotAngleAlpha) / (1.0 - spotAngleAlpha);

		float distanceSquared = distance * distance;

		float lightRadiusSquared = lightRadius * lightRadius;

		attenuation *= caculateInverseSquareWithWindowingFunction(
			distanceSquared,
			lightRadiusSquared);

		return attenuation;
	}
}
