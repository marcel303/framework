include engine/ShaderPS.txt
include renderOne/depth-functions.txt
include renderOne/fog-functions.txt

uniform sampler2D depthTexture;
uniform sampler2D normalTexture;
uniform sampler2D planarTextureX;
uniform sampler2D planarTextureY;
uniform sampler2D planarTextureZ;

uniform mat4x4 projectionToView;
uniform mat4x4 viewToWorld;
uniform mat4x4 worldToView;

uniform float time;

shader_in vec2 texcoord;

void main()
{
	float camera_view_depth = texture(depthTexture, texcoord).x;

	if (camera_view_depth == 1.0)
	{
		// scene background
		shader_fragColor = vec4(0.0);
		return;
	}

	vec3 position_view = depthToViewPosition(camera_view_depth, texcoord, projectionToView);
	vec3 position_world = (viewToWorld * vec4(position_view, 1.0)).xyz;

	vec3 normal_view = texture(normalTexture, texcoord).xyz;
	normal_view = normalize(normal_view);
	vec3 normal_world = (viewToWorld * vec4(normal_view, 0.0)).xyz;

	float amount_x = abs(normal_world.x);
	float amount_y = abs(normal_world.y);
	float amount_z = abs(normal_world.z);

	vec3 color_x = texture(planarTextureX, position_world.yz).rgb;
	vec3 color_y = texture(planarTextureY, position_world.zx).rgb;
	vec3 color_z = texture(planarTextureZ, position_world.xy).rgb;

	color_x = color_x * 2.0 - vec3(1.0);
	color_y = color_y * 2.0 - vec3(1.0);
	color_z = color_z * 2.0 - vec3(1.0);

	vec3 color = vec3(0.0);

	color += color_x * amount_x;
	color += color_y * amount_y;
	color += color_z * amount_z;
	color.xy = color.yx;
	color.z = 0.0;
	//color = -color;
	color /= 3.0;

	color = (worldToView * vec4(color, 0.0)).xyz;
	//color = vec3(0.0);

	shader_fragColor = vec4(color, 1.0);
}