include engine/ShaderPS.txt
include engine/ShaderUtil.txt

// source: https://www.shadertoy.com/view/XssGz8

// To the extent possible under law,
// the author has waived all copyright and related or neighboring rights to this work.

uniform sampler2D source;
uniform float strength;
uniform float time;

shader_in vec2 v_texcoord;

// utility functions

float remap( float t, float a, float b )
{
	return clamp( (t - a) / (b - a), 0.0, 1.0 );
}

vec2 remap( vec2 t, vec2 a, vec2 b )
{
	return clamp( (t - a) / (b - a), 0.0, 1.0 );
}

float nrand( vec2 n )
{
    return rand01ScreenSpace(n * textureSize(source, 0));
}

// spectrum offset functions

// note: input [0;1]
vec3 spectrum_offset_rgb( float t )
{
    // note: optimisation from: https://twitter.com/Stubbesaurus/status/818847844790575104
    
    float t0 = 3.0 * t - 1.5;
	
    vec3 ret = clamp( vec3( -t0, 1.0-abs(t0), t0), 0.0, 1.0);

    return ret;
}

vec3 yCgCo2rgb( vec3 ycc )
{
    float R = ycc.x - ycc.y + ycc.z;
	float G = ycc.x + ycc.y;
	float B = ycc.x - ycc.y - ycc.z;

    return vec3(R,G,B);
}

vec3 spectrum_offset_ycgco( float t )
{
	//vec3 ygo = vec3( 1.0, 1.5*t, 0.0 ); //green-pink
    //vec3 ygo = vec3( 1.0, -1.5*t, 0.0 ); //green-purple
    vec3 ygo = vec3( 1.0, 0.0, -1.25*t ); //cyan-orange
    //vec3 ygo = vec3( 1.0, 0.0, 1.5*t ); //brownyello-blue

    return yCgCo2rgb( ygo );
}

vec3 yuv2rgb( vec3 yuv )
{
    vec3 rgb;
    rgb.r = yuv.x + yuv.z * 1.13983;
    rgb.g = yuv.x + dot( vec2(-0.39465, -0.58060), yuv.yz );
    rgb.b = yuv.x + yuv.y * 2.03211;

    return rgb;
}

vec3 spectrum_offset_yuv( float t )
{
    //vec3 yuv = vec3( 1.0, 3.0*t, 0.0 ); //purple-green
    //vec3 yuv = vec3( 1.0, 0.0, 2.0*t ); //purple-green
    vec3 yuv = vec3( 1.0, 0.0, -1.0*t ); //cyan-orange
    //vec3 yuv = vec3( 1.0, -0.75*t, 0.0 ); //brownyello-blue

    return yuv2rgb( yuv );
}

vec3 spectrum_offset( float t )
{

    return spectrum_offset_rgb( t );
    //return spectrum_offset_ycgco( t );
    //return spectrum_offset_yuv( t );

}

// lense distortion functions

// note: from: https://www.shadertoy.com/view/XslGz8
vec2 radialdistort( vec2 coord, vec2 amt )
{

	vec2 cc = coord - 0.5;

	return coord + 2.0 * cc * amt;

}

// Given a vec2 in [-1,+1], generate a texture coord in [0,+1]
vec2 barrelDistortion( vec2 p, vec2 amt )
{

    p = 2.0 * p - 1.0;

    /*
    const float maxBarrelPower = 5.0;
	//note: http://glsl.heroku.com/e#3290.7 , copied from Little Grasshopper
    float theta  = atan(p.y, p.x);
    vec2 radius = vec2( length(p) );
    radius = pow(radius, 1.0 + maxBarrelPower * amt);
    p.x = radius.x * cos(theta);
    p.y = radius.y * sin(theta);
	*/

    // much faster version
    //const float maxBarrelPower = 5.0;
    //float radius = length(p);
    float maxBarrelPower = sqrt(5.0);
    float radius = dot(p,p); //faster but doesn't match above accurately
    p *= pow(vec2(radius), maxBarrelPower * amt);

    return p * 0.5 + 0.5;

}

// note: from: https://www.shadertoy.com/view/MlSXR3
vec2 brownConradyDistortion( vec2 uv, float dist )
{

    uv = uv * 2.0 - 1.0;

    // positive values of K1 give barrel distortion, negative give pincushion
    float barrelDistortion1 = 0.1 * dist; // K1 in text books
    float barrelDistortion2 = -0.025 * dist; // K2 in text books

    float r2 = dot(uv,uv);
    uv *= 1.0 + barrelDistortion1 * r2 + barrelDistortion2 * r2 * r2;
    //uv *= 1.0 + barrelDistortion1 * r2;
    
    // tangential distortion (due to off center lens elements)
    // is not modeled in this function, but if it was, the terms would go here

    return uv * 0.5 + 0.5;

}

vec2 distort( vec2 uv, float t, vec2 min_distort, vec2 max_distort )
{

    vec2 dist = mix( min_distort, max_distort, t );

    //return radialdistort( uv, 2.0 * dist );
    //return barrelDistortion( uv, 1.75 * dist ); //distortion at center
    return brownConradyDistortion( uv, 75.0 * dist.x );

}

// source & output image

vec3 render( vec2 uv )
{

#if 0
    // debug overlay in the bottom right corner

    if ( uv.x > 0.7 && uv.y > 0.7 )
    {
        float d = length( vec2(0.77)- uv );
        d = min( d, length( vec2(0.82)- uv ) );
        d = min( d, length( vec2(0.875)- uv ) );      
        return vec3( step( d, 0.025) );
    }
#endif
    
    return texture( source, uv ).rgb;

}

void main()
{	

	vec2 uv = v_texcoord;

#if 0
    // debug overlay in the top-right corner

    if ( uv.x > 0.7 &&  uv.y < 0.2 )
    {
        vec2 luv = remap( uv, vec2(0.7,0.0), vec2(1.0, 0.2) );
        vec3 c;
        c.r = step( luv.x, 1.0/3.0);
        c.g = step( 1.0/3.0, luv.x )*step(luv.x, 2.0/3.0);
        c.b = step( 2.0/3.0, luv.x );
        c *= 0.4;
        
        vec3 rgb = spectrum_offset_rgb( luv.x );
        c += step( abs(rgb-luv.yyy), vec3(0.0125) );

        if ( uv.y > 0.20125 )
        {
            c = spectrum_offset( luv.x );
            if ( uv.y < 0.21 )
                c = vec3(0.0);
                
        }
        
        shader_fragColor.rgb = c;
        return;
    }
#endif

	vec2 max_distort = vec2(strength * textureSize(source, 0).x) / textureSize(source, 0);
    vec2 min_distort = 0.5 * max_distort;
    //vec2 min_distort = vec2(0.0);

    //vec2 oversiz = vec2(1.0); // no oversizing (this creates visible edge clamping artefacts)
    vec2 oversiz = distort( vec2(1.0), 1.0, min_distort, max_distort );
    uv = remap( uv, 1.0 - oversiz, oversiz );
    
    int num_iter = 7;
    float stepsiz = 1.0 / (num_iter - 1.0);

    float rnd = nrand( uv );
    float t = rnd * stepsiz;

    vec3 sumcolor = vec3(0.0);
	vec3 sumwhite = vec3(0.0);

    vec2 uvd1 = distort(uv, 0.0, min_distort, max_distort );
    vec2 uvd2 = distort(uv, 1.0, min_distort, max_distort );

	for (int i = 0; i < num_iter; ++i)
	{
		vec3 white = spectrum_offset(t);

		sumwhite += white;

    #if 1
        vec2 uvd = mix(uvd1, uvd2, t);
    #else
        vec2 uvd = distort(uv, t, min_distort, max_distort ); //TODO: move out of loop
    #endif

		sumcolor += white * render( uvd );

        t += stepsiz;
	}

    vec3 outcol = sumcolor.rgb / sumwhite;
    
	shader_fragColor = vec4(outcol, 1.0);
}
