// Created by Reinder Nijhoff 2016
// Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
// @reindernijhoff
//
// https://www.shadertoy.com/view/ls3GWS
//
//
// demonstrating post process Screen Space Ambient Occlusion applied to a depth and normal map
// with the geometry of my shader '[SIG15] Matrix Lobby Scene': 
//
// https://www.shadertoy.com/view/MtsXzf
//

// shader adapted to framework by Marcel Smit, 2020
// fixed a UV offset aspect-ratio scaling issue in spiralAO

include engine/ShaderPS.txt
include renderOne/depth-functions.txt

uniform sampler2D depthTexture;
uniform sampler2D normalTexture;

uniform mat4x4 projectionToView;
uniform float strength;

shader_in vec2 v_texcoord;

#define SAMPLES 12
#define SCALE 0.0
#define BIAS 0.01
#define SAMPLE_RAD 0.1
#define MAX_DISTANCE 0.5

#define MOD3 vec3(0.1031, 0.11369, 0.13787)

float hash12(vec2 p)
{
	vec3 p3  = fract(vec3(p.xyx) * MOD3);
    p3 += dot(p3, p3.yzx + 19.19);
    return fract((p3.x + p3.y) * p3.z);
}

vec2 hash22(vec2 p)
{
	vec3 p3 = fract(vec3(p.xyx) * MOD3);
    p3 += dot(p3, p3.yzx + 19.19);
    return fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));
}

vec3 getPosition(vec2 uv)
{
	float depth = texture(depthTexture, uv).x;

	return depthToViewPosition(depth, uv, projectionToView);
}

vec3 getNormal(vec2 uv)
{
    return texture(normalTexture, uv).xyz;
}

//

float doAmbientOcclusion(
	vec2 tcoord,
	vec2 uv,
	vec3 p,
	vec3 cnorm)
{
    vec3 diff = getPosition(tcoord + uv) - p;

    float l = length(diff);

    vec3 v = diff / l;
    float d = l * SCALE;
    float ao = max(0.0, dot(cnorm, v) - BIAS) * (1.0 / (1.0 + d));

    ao *= smoothstep(MAX_DISTANCE, MAX_DISTANCE * 0.5, l);

    return ao;
}

float spiralAO(vec2 uv, vec3 p, vec3 n, float rad)
{
    float goldenAngle = 2.4;
    float ao = 0.0;
    float inv = 1.0 / float(SAMPLES);
    float radius = 0.0;

    vec2 uvSize = textureSize(depthTexture, 0);
    float xScale = uvSize.y / uvSize.x;

    float rotatePhase = hash12( uv*uvSize ) * 6.28;
    float rStep = inv * rad;

    for (int i = 0; i < SAMPLES; i++)
    {
    	vec2 spiralUV;
        spiralUV.x = sin(rotatePhase) * xScale;
        spiralUV.y = cos(rotatePhase);
        radius += rStep;
        ao += doAmbientOcclusion(uv, spiralUV * radius, p, n);
        rotatePhase += goldenAngle;
    }

    ao *= inv;

    return ao;
}

void main()
{
	vec2 uv = v_texcoord;

    vec3 p = getPosition(uv);
    vec3 n = getNormal(uv);

    float ao = 0.0;
    float rad = SAMPLE_RAD/p.z;

    ao = spiralAO(uv, p, n, rad);

    ao = 1.0 - ao * strength;

    ao = max(0.0, ao);

	shader_fragColor = vec4(ao, ao, ao, 1.0);
}
