include engine/ShaderPS.txt
include engine/ShaderUtil.txt
include renderOne/depth-functions.txt

uniform sampler2D colorTexture;
uniform sampler2D depthTexture;

uniform mat4x4 projectionToView;

uniform float strength;
uniform float focusDistance;

shader_in vec2 texcoord;

void main()
{
	float depth = texture(depthTexture, texcoord).x;

	float viewZ = depthToViewZ(depth, texcoord, projectionToView);

	float dof_begin = focusDistance;
	float dof_range = dof_begin/2.0;
	
	float dof_back = clamp(0.5 + (viewZ - dof_begin) / dof_range, 0.0, 1.0);

	if (dof_back == 0.0)
	{
		vec3 color = texture(colorTexture, texcoord).rgb;
		shader_fragColor = vec4(color, 1.0);
	}
	else
	{
		vec2 textureSizeRcp = vec2(1.0) / textureSize(colorTexture, 0);

		vec3 color = vec3(0.0);
		int numColors = 0;

		for (int x = -3; x <= +3; ++x)
		{
			for (int y = -3; y <= +3; ++y)
			{
				vec2 coord = texcoord + vec2(x, y) * textureSizeRcp * strength * dof_back;

				color += texture(colorTexture, coord).rgb;

				numColors++;
			}
		}

		//color = texture(colorTexture, texcoord).rgb;
		//color.rgb = vec3(viewZ);
		//color.rgb = mix(colors, vec3(0.0), vec3(dof_back));
		//color.r = dof_back * numColors;

		//shader_fragColor = vec4(color, 1.0);
		shader_fragColor = vec4(color / numColors, 1.0);
	}
}
