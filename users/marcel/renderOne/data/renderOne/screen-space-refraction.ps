include engine/ShaderPS.txt
include renderOne/depth-functions.txt
include renderOne/fog-functions.txt

uniform sampler2D depthTexture;
uniform sampler2D normalTexture;
uniform sampler2D colorTexture;

uniform mat4x4 projectionToView;
uniform mat4x4 viewToProjection;

shader_in vec2 texcoord;

int numSteps = 60;
float maxDistance = 0.8;
int numRefinementSteps = 10;

bool intersectsDepth(float ray_depth, float surface_depth, vec2 projection_xy, float dir_z)
{
	float ray_z = depthToViewPosition(ray_depth, projection_xy, projectionToView).z;
	float surface_z = depthToViewPosition(surface_depth, projection_xy, projectionToView).z;

	float dz = ray_z - surface_z;

	float thickness = 0.01 + surface_z * 0.02;

	if (dz >= 0.0 && dz < thickness)
	{
		//shader_fragColor = vec4(vec3(1.0), dz);
		//shader_fragColor = vec4(1.0);
		return true;
	}
	else
	{
		return false;
	}
}

vec3 binarySearch(vec3 dir, vec3 p)
{
    for (int i = 0; i < numRefinementSteps; ++i)
    {
        float depth = texture(depthTexture, p.xy).x;
 
        float dd = p.z - depth;

        dir *= 0.5;

        if (dd < 0.0)
            p += dir;
        else
            p -= dir;    
    }

    return p;
}


void raycast(vec3 p1, vec3 p2, float dir_z)
{
	vec3 p = p1;
	vec3 step = (p2 - p1) / numSteps;

	//shader_fragColor.rgb = p2;
	//shader_fragColor.a = 1.0;
	//return;

	float fade = 1.0;

	for (int i = 0; i < numSteps; ++i)
	{
		p += step;

		float depth = texture(depthTexture, p.xy).x;

		if (depth == 1.0)
			continue;

		// todo : what is a sensible value for the thickness constraint ?
		// todo : will need info from the projection matrix to map to linear

		if (intersectsDepth(p.z, depth, p.xy, dir_z))
		{
			//p = binarySearch(step, p);

			// check if the ray travelled outside of the screen bounds
			if (p.x < 0.0 || p.x > 1.0 ||
				p.y < 0.0 || p.y > 1.0)
			{
				shader_fragColor = vec4(0.0);
				return;
			}

			// sample color at the point of intersection
			vec3 color = texture(colorTexture, p.xy).rgb;
			shader_fragColor = vec4(color, 0.5);

			// vignette near the screen edges
			vec2 fade_coord = abs(p.xy - vec2(0.5)) * 2.0;
			float fade = 1.0 - max(fade_coord.x, fade_coord.y);

			// fade based on the ray pointing towards the camera
			//fade *= min(1.0, 1.0 + step.z);

			shader_fragColor.a *= fade;
			return;
		}
	}
}

void main()
{
	float camera_view_depth = texture(depthTexture, texcoord).x;

	if (camera_view_depth == 1.0)
	{
		// scene background
		shader_fragColor = vec4(0.0);
		return;
	}

	vec3 position_view = depthToViewPosition(camera_view_depth, texcoord, projectionToView);

	vec3 normal_view = texture(normalTexture, texcoord).xyz;
	normal_view = normalize(normal_view);

	vec3 rayDirection_view = position_view;
	//rayDirection_view = normalize(rayDirection_view);
	
	vec3 reflectedRayDirection_view = rayDirection_view - 2.0 * dot(rayDirection_view, normal_view) * normal_view;
	reflectedRayDirection_view = normalize(reflectedRayDirection_view);

	shader_fragColor = vec4(0.0);

	vec3 position1_view = position_view;
	vec3 position2_view = position_view + reflectedRayDirection_view;

	vec3 p1 = viewPositionToClipspace3(vec4(position1_view, 1.0), viewToProjection);
	vec3 p2 = viewPositionToClipspace3(vec4(position2_view, 1.0), viewToProjection);

	vec2 p_delta = p2.xy - p1.xy;
	float p_delta_length = length(p_delta);

	float p_scale = maxDistance / p_delta_length;

	p2 = p1 + (p2 - p1) * p_scale;

	raycast(p1, p2, reflectedRayDirection_view.z);
}