uniform sampler2D shadowDepthAtlas;
uniform sampler2D shadowColorAtlas;

uniform mat4x4 shadowMatrices[64];

uniform float numShadowMaps;
uniform float enableColorShadows;

#define ENABLE_SHADOW_DEBUGS 0

vec3 lookupShadow(int id, vec3 position_view)
{
	if (id >= numShadowMaps)
		return vec3(1.0);

	// transform view-space position into light-space

	vec4 position_light = shadowMatrices[id] * vec4(position_view, 1.0);

#if !defined(GL_core_profile)
	position_light.y = -position_light.y;
#endif

	// determine texture coordinates

	vec2 position_texture = position_light.xy / position_light.w;

	position_texture = (position_texture + vec2(1.0)) * 0.5;

	// perform texture sampling inside the atlas texture

// todo : optimize : store shadow atlas min/max inside a uniform array
	vec2 atlas_min = vec2(1.0 / numShadowMaps * (id + 0), 0.0);
	vec2 atlas_max = vec2(1.0 / numShadowMaps * (id + 1), 1.0);

	vec2 position_atlas = mix(atlas_min, atlas_max, position_texture);

	//position_atlas += 0.5 / textureSize(shadowDepthAtlas, 0);

	position_atlas = max(atlas_min, min(atlas_max, position_atlas));

	float depth = texture(shadowDepthAtlas, position_atlas).x;

#if ENABLE_SHADOW_DEBUGS

	//if (position_light.z < 0.0) return vec3(1, 0, 1);
	//if (depth < 0.0) return vec3(0, 0, 1);
	//if (depth > 1000.0) return vec3(1, 0, 0);

#if 0
	if (position_atlas.x < atlas_p1.x || position_atlas.x > atlas_p2.x)
		return vec3(1, 0, 0);
	if (position_atlas.y < atlas_p1.y || position_atlas.y > atlas_p2.y)
		return vec3(0, 0, 1);
#endif

#if 0
	if (position_texture.x < 0.0 || position_texture.x > 1.0)
		return vec3(1, 0, 0);
	if (position_texture.y < 0.0 || position_texture.y > 1.0)
		return vec3(0, 0, 1);
#endif

	//return vec3(atlas_p1, 0);
	//return vec3(atlas_p2, 0);
	//return vec3(position_atlas, 0.0);
	//return vec3(depth);
	//return v_position;

	//return vec3(position_texture, 0.0);
	//return vec3(0.5);
	//return position_light.zzz;
	//return vec3(abs(position_light.z - depth));

#endif

	float occlusionMask = (depth < position_light.z) ? 0.0 : 1.0;

	if (enableColorShadows != 0.0 && occlusionMask != 0.0)
		return texture(shadowColorAtlas, position_atlas).rgb;
	else
		return vec3(occlusionMask);
}

#undef ENABLE_SHADOW_DEBUGS