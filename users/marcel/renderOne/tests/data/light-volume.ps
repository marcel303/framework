include engine/ShaderPS.txt
include light-params.txt
include light-volume-utils.txt

shader_in vec3 v_position;
shader_in vec4 v_color;

//

uniform float useLightVolume;

//

vec3 computeLighting(LightParams lightParams, vec3 position)
{
	float distance = length(position - lightParams.position);

	float att_distance = (distance - lightParams.att_begin) / (lightParams.att_end - lightParams.att_begin);
	att_distance = clamp(att_distance, 0.0, 1.0);
	float att = 1.0 - att_distance;

	return vec3(att);
}

//

vec3 lightColor;

void forEachLightId(int id)
{
	LightParams lightParams = lookupLightParams(id);

	lightColor += computeLighting(lightParams, v_position);
}

void main()
{
	lightColor = vec3(0.0);

	if (useLightVolume == 0.0)
	{
		for (int i = 0; i < int(numLights); ++i)
			forEachLightId(i);
	}
	else
	{
		forEachLightIdAt(v_position);
	}

	shader_fragColor.rgb = lightColor * v_color.rgb;
	shader_fragColor.a = v_color.a;
}
