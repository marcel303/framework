include renderOne/forward-lighting/light-params.txt
include renderOne/forward-lighting/light-volume.txt
include renderOne/light-attenuation-functions.txt
include renderOne/shadow-mapping/shadow-mapping.txt

#define DEBUG_LIGHTING_COMPLXITY 0

vec3 calculatePointLight(
	LightParams light,
	vec3 position_view,
	bool receiveShadows)
{
	float attenuation = computeAttenuationForPointLight(
		position_view,
		light.position,
		light.attenuationBegin,
		light.attenuationEnd);

	if (attenuation == 0.0)
	{
		return vec3(0.0);
	}
	else
	{
		vec3 result = light.color * attenuation;

	/*
		// no shadow mapping for point lights (yet..?)

		if (receiveShadows)
		{
			int shadowMapId = int(light.userData);

			if (shadowMapId != -1)
			{
				result *= lookupShadow(shadowMapId, position_view);
			}
		}
	*/

		return result;
	}
}

vec3 calculateSpotLight(
	LightParams light,
	vec3 position_view,
	vec3 normal_view,
	bool receiveShadows)
{
	float d = max(0.0, -dot(normal_view, light.direction));

	if (d < 0.0)
		return vec3(0.0);

	float attenuation = computeAttenuationForSpotLight(
		position_view,
		light.position,
		light.direction,
		light.spotAngleAlpha,
		light.attenuationBegin,
		light.attenuationEnd);

	if (attenuation == 0.0)
	{
		return vec3(0.0);
	}
	else
	{
		vec3 result = light.color * d * attenuation;

		if (receiveShadows)
		{
			int shadowMapId = int(light.userData);

			if (shadowMapId != -1)
			{
				result *= lookupShadow(shadowMapId, position_view);
			}
		}

		return result;
	}
}

vec3 calculateDirectionalLight(
	LightParams light,
	vec3 position_view,
	vec3 normal_view,
	bool receiveShadows)
{
	float d = max(0.0, -dot(normal_view, light.direction));

	if (d < 0.0)
		return vec3(0.0);

	vec3 result = light.color * d;

	if (receiveShadows)
	{
		int shadowMapId = int(light.userData);

		if (shadowMapId != -1)
		{
			result *= lookupShadow(shadowMapId, position_view);
		}
	}

	return result;
}

vec3 s_position_view;
vec3 s_normal_view;
vec3 s_color;
bool s_receiveShadows;

#if DEBUG_LIGHTING_COMPLXITY
int s_numLights;
#endif

void forEachLightId(int id)
{
	LightParams light = lookupLightParams(id);

	if (light.type == kLightType_Point)
	{
		s_color += calculatePointLight(
			light,
			s_position_view,
			s_receiveShadows);
	}
	else if (light.type == kLightType_Spot)
	{
		s_color += calculateSpotLight(
			light,
			s_position_view,
			s_normal_view,
			s_receiveShadows);
	}
	else if (light.type == kLightType_Directional)
	{
		s_color += calculateDirectionalLight(
			light,
			s_position_view,
			s_normal_view,
			s_receiveShadows);
	}

#if DEBUG_LIGHTING_COMPLXITY
	s_numLights++;
#endif
}

vec3 calculateLighting(vec3 position_view, vec3 normal_view, bool receiveShadows)
{
	// -- use light volume to lookup lights at view-position --

	s_position_view = position_view;
	s_normal_view = normal_view;
	s_color = vec3(0.0);
	s_receiveShadows = receiveShadows;

#if DEBUG_LIGHTING_COMPLXITY
	s_numLights = 0;
#endif

	forEachLightIdAt(position_view);

	// -- add ambient light --

	s_color += vec3(0.01);

	// -- apply debugs --

#if DEBUG_LIGHTING_COMPLXITY
	s_color += vec3(s_numLights / 16.0);
#endif

	return s_color;
}
