include engine/ShaderPS.txt
include light-params.txt
include light-volume-utils.txt

shader_in vec3 v_position;

//

uniform float useLightVolume;

//

vec3 computeLighting(LightParams lightParams, vec3 position)
{
	if (lightParams.type == kLightType_Point)
	{
		float distance = length(position - lightParams.position);

		float att_distance = (distance - lightParams.attenuationBegin) / (lightParams.attenuationEnd - lightParams.attenuationBegin);
		att_distance = clamp(att_distance, 0.0, 1.0);
		float att = 1.0 - att_distance;

		return vec3(att);
		//return vec3(1.0 / (att_distance + 0.001));
		//return vec3(1.0 / (distance + 0.001));
		//return vec3(1.0 / lightParams.att_end);
	}
	else if (lightParams.type == kLightType_Spot)
	{
		float attenuation;

		float distance = dot(position, lightParams.direction) - dot(lightParams.position, lightParams.direction);

		float farDistance = lightParams.attenuationEnd;

		if (distance <= 0.0 || distance >= farDistance)
			attenuation = 0.0;
		else
		{
			vec3 delta = position - lightParams.position;
			float cosAngle = dot(lightParams.direction, normalize(delta));

			float alpha = lightParams.spotAngleAlpha;

			if (cosAngle < alpha)
				attenuation = 0.0;
			else
				attenuation = (cosAngle - alpha) / (1.0 - alpha);

			attenuation *= 1.0 - distance / farDistance;
		}
		
		return vec3(attenuation);
	}
	else
	{
		return vec3(0.0);
	}

}

//

vec3 lightColor;

void forEachLightId(int id)
{
	LightParams lightParams = lookupLightParams(id);

	lightColor += computeLighting(lightParams, v_position);
}

void main()
{
	lightColor = vec3(0.0);

	if (useLightVolume == 0.0)
	{
		for (int i = 0; i < int(numLights); ++i)
			forEachLightId(i);
	}
	else
	{
		forEachLightIdAt(v_position);
	}

	shader_fragColor.rgb = lightColor;
	shader_fragColor.a = 1.0;
}
