#include "framework.h"
#include "Timer.h"
#include <vector>

/*
https://mikeash.com/pyblog/fluid-simulation-for-dummies.html
Coding Challenge #132: Fluid Simulation
https://www.youtube.com/watch?v=alhpH6ECFvQ
*/

/*

todo : expperiment with the following boundary modes, and external forces,
from: http://karlsims.com/fluid-flow.html,

Zero: using a value of zero beyond the grid will avoid flow toward or away from the boundary, as if the fluid is contained in a box, because any edge cell's component of flow normal to the boundary would typically create a non-zero divergence and be removed. The divergence-removal examples above used this mode.
Repeat: repeating the flow value from the nearest edge cell will instead allow flow toward or away from the edges as if the fluid can exit or enter the grid.
Scaled repeat: combining zero and repeat edge-modes can also be useful. Using a scaled value of the nearest edge cell can give a soft boundary effect that slows down the flow at the edges but doesn't completely stop it. Alternatively, using zero for the flow component normal to the boundary, and repeat mode for the component parallel to the boundary, can give a more slippery edge effect.
Wrap: copying the flow value from the opposite side of the grid can create a wrap-around behavior where flow exiting on one side of the grid enters on the other.

Obstacles can also be added to the grid with similar boundary conditions by forcing the flow, or its normal component, to zero at their locations.

--

Realistic looking fluid behavior can be generated by alternating between the fluid momentum and divergence-removal steps described above. However some non-zero flow velocity needs to be set somehow, either procedurally or interactively. For example, adding linear flow at specific locations can create a squirting ink effect (see below), or tracking mouse or camera motion can be used to interactively push the fluid.

Other forces can be added to simulate various physical phenomena:

Gravity or buoyency can affect some parts of the fluid differently than others using a tracer image that represents the fluid density.
Damping or friction can reduce the flow velocity over time.
Viscosity can be simulated by diffusing the flow field slightly at each time step so the velocities become more like their neighbors. Note that the repeated resampling of the flow field will also cause a small amount of diffusion.
Cohesive forces can be approximated by using a tracer image to track different fluid substances, such as oil vs water, and then pushing the substances toward areas of the same type, moving convex boundaries inwards and concave boundaries outwards.

*/

#define TODO 0

#define SCALE 2

#define IX_2D(x, y) ((x) + (y) * N)
#define IX_3D(x, y, z) ((x) + (y) * N + (z) * N * N)

// -----

#include "StringEx.h"
#include <set>
#include <string>

static std::set<std::string> s_createdShaders;

static void getOrCreateShader(const char * name, const char * code, const char * globals)
{
	if (s_createdShaders.count(name) == 0)
	{
		s_createdShaders.insert(name);
		
		// todo : create shader sources
		
		const char * vs =
			R"SHADER(
				include engine/ShaderVS.txt

				shader_out vec2 v_texcoord;

				void main()
				{
					vec4 position = unpackPosition();

					gl_Position = objectToProjection(position);
					
					v_texcoord = unpackTexcoord(0);
				}
			)SHADER";
		
		const char * ps_template =
			R"SHADER(
				include engine/ShaderPS.txt

				%s
		
				shader_in vec2 v_texcoord;

				float samp(sampler2D s, float x, float y)
				{
					vec2 size = textureSize(s, 0);
					
					return texture(s, v_texcoord + vec2(x, y) / size).x; // fixme : divide x, y by texture size
				}
		
				float process()
				{
					%s;
				}
		
				void main()
				{
					shader_fragColor = vec4(process());
					//shader_fragColor = vec4(0.1, 0, 0, 1);
				}
			)SHADER";
		
		char ps[1024];
		sprintf_s(ps, sizeof(ps), ps_template, globals, code);
		
		char vs_name[64];
		char ps_name[64];
		sprintf_s(vs_name, sizeof(vs_name), "%s.vs", name);
		sprintf_s(ps_name, sizeof(ps_name), "%s.ps", name);
		shaderSource(vs_name, vs);
		shaderSource(ps_name, ps);
		
		Shader shader(name, vs_name, ps_name);
		checkErrorGL();
	}
}

// -----

static void set_bnd2d(const int b, float * x, const int N)
{
	for (int i = 1; i < N - 1; ++i)
	{
		x[IX_2D(i, 0  )] = b == 2 ? -x[IX_2D(i, 1  )] : x[IX_2D(i, 1  )];
		x[IX_2D(i, N-1)] = b == 2 ? -x[IX_2D(i, N-2)] : x[IX_2D(i, N-2)];
	}
	
	for (int j = 1; j < N - 1; ++j)
	{
		x[IX_2D(0  , j)] = b == 1 ? -x[IX_2D(1  , j)] : x[IX_2D(1  , j)];
		x[IX_2D(N-1, j)] = b == 1 ? -x[IX_2D(N-2, j)] : x[IX_2D(N-2, j)];
	}

    x[IX_2D(0,     0)]   = 0.5f * (x[IX_2D(1,     0)] + x[IX_2D(0,     1)]);
    x[IX_2D(0,   N-1)]   = 0.5f * (x[IX_2D(1,   N-1)] + x[IX_2D(0,   N-2)]);
    x[IX_2D(N-1,   0)]   = 0.5f * (x[IX_2D(N-2,   0)] + x[IX_2D(N-1,   1)]);
    x[IX_2D(N-1, N-1)]   = 0.5f * (x[IX_2D(N-2, N-1)] + x[IX_2D(N-1, N-2)]);
}

static void lin_solve2d(const int b, Surface * x, const Surface * x0, const float a, const float c, const int iter, const int N)
{
    float cRecip = 1.f / c;

	getOrCreateShader("lin_solve2d",
		R"SHADER(
			return
				(
					samp(x0, 0, 0)
					+ a *
						(
							+samp(x, +1,  0)
							+samp(x, -1,  0)
							+samp(x,  0, +1)
							+samp(x,  0, -1)
						)
				) * cRecip;
		)SHADER",
		"sampler2D x; sampler2D x0; uniform float a; uniform float cRecip;");
	
    for (int k = 0; k < iter; ++k)
    {
		Shader shader("lin_solve2d");
		shader.setTexture("x", 0, x->getTexture());
		shader.setTexture("x0", 1, x0->getTexture());
		shader.setImmediate("a", a);
		shader.setImmediate("cRecip", cRecip);
    	x->postprocess(shader);

	#if TODO
        set_bnd2d(b, x, N);
	#endif
    }
}

static void lin_solve2d_xy(
	Surface * x, const Surface * x0,
	Surface * y, const Surface * y0,
	const float a, const float c, const int iter, const int N)
{
    float cRecip = 1.f / c;

	getOrCreateShader("lin_solve2d",
		R"SHADER(
			return
				(
					samp(x0, 0, 0)
					+ a *
						(
							+samp(x, +1,  0)
							+samp(x, -1,  0)
							+samp(x,  0, +1)
							+samp(x,  0, -1)
						)
				) * cRecip;
		)SHADER",
		"uniform sampler2D x; uniform sampler2D x0; uniform float a; uniform float cRecip;");
	
	for (int k = 0; k < iter; ++k)
    {
		Shader shader("lin_solve2d");
		shader.setTexture("x", 0, x->getTexture());
		shader.setTexture("x0", 1, x0->getTexture());
		shader.setImmediate("a", a);
		shader.setImmediate("cRecip", cRecip);
    	x->postprocess(shader);
		
    	shader.setTexture("y", 0, y->getTexture());
		shader.setTexture("y0", 1, y0->getTexture());
		shader.setImmediate("a", a);
		shader.setImmediate("cRecip", cRecip);
    	y->postprocess(shader);
		
	#if TODO
        set_bnd2d(1, x, N);
        set_bnd2d(2, x, N);
	#endif
    }
}

static void diffuse2d(const int b, Surface * x, const Surface * x0, const float diff, const float dt, const int iter, const int N)
{
	const float a = dt * diff * (N - 2);
	lin_solve2d(b, x, x0, a, 1 + 4 * a, iter, N);
}

static void diffuse2d_xy(Surface * x, const Surface * x0, Surface * y, const Surface * y0, const float diff, const float dt, const int iter, const int N)
{
	const float a = dt * diff * (N - 2);
	lin_solve2d_xy(x, x0, y, y0, a, 1 + 4 * a, iter, N);
}

static void project2d(
	Surface * velocX,
	Surface * velocY,
	Surface * p,
	Surface * div, const int iter, const int N)
{
	getOrCreateShader("project2d_div",
		R"SHADER(
			return
				-0.25f *
					(
						+ (+ samp(velocX, +1,  0) - samp(velocX, -1,  0))
						+ (+ samp(velocY,  0, +1) - samp(velocY,  0, -1))
					);
		)SHADER",
		"uniform sampler2D velocX; uniform sampler2D velocY;");
	
	pushSurface(div);
	{
		Shader shader("project2d_div");
		setShader(shader);
		shader.setTexture("velocX", 0, velocX->getTexture());
		shader.setTexture("velocY", 1, velocY->getTexture());
		drawRect(0, 0, div->getWidth(), div->getHeight());
	}
	popSurface();
	
#if TODO
    set_bnd2d(0, div, N);
#endif
	
	p->clear();
	lin_solve2d(0, p, div, 1, 4, iter, N);
	
	getOrCreateShader("project2d_veloc_x",
		R"SHADER(
			return - ( samp(p, +1, 0) - samp(p, -1, 0) );
		)SHADER",
		"uniform sampler2D p;");
	
	getOrCreateShader("project2d_veloc_y",
		R"SHADER(
			return - ( samp(p, 0, +1) - samp(p, 0, -1) );
		)SHADER",
		"uniform sampler2D p;");
	
	pushSurface(velocX);
	pushBlend(BLEND_ADD);
	{
		Shader shader("project2d_veloc_x");
		setShader(shader);
		shader.setTexture("p", 0, p->getTexture());
		drawRect(0, 0, velocX->getWidth(), velocX->getHeight());
	}
	popBlend();
	popSurface();

	pushSurface(velocY);
	pushBlend(BLEND_ADD);
	{
		Shader shader("project2d_veloc_y");
		setShader(shader);
		shader.setTexture("p", 0, p->getTexture());
		drawRect(0, 0, velocY->getWidth(), velocY->getHeight());
	}
	popBlend();
	popSurface();
	
#if TODO
    set_bnd2d(1, velocX, N);
    set_bnd2d(2, velocY, N);
#endif
}

static void advect2d(const int b, Surface * d, const Surface * d0, const Surface * velocX, const Surface * velocY, const float dt, const int N)
{
    const float dtx = dt * (N - 2);
    const float dty = dt * (N - 2);
	
    getOrCreateShader("advect2d",
	R"SHADER(
		float tmp1 = dtx * samp(velocX, 0, 0);
		float tmp2 = dty * samp(velocY, 0, 0);
			
		return samp(d0, tmp1, tmp2);
	)SHADER",
	"uniform sampler2D velocX; uniform sampler2D velocY; uniform sampler2D d0; uniform float dtx; uniform float dty;");
	
    pushSurface(d);
    pushBlend(BLEND_OPAQUE);
    {
		Shader shader("advect2d");
		setShader(shader);
		shader.setTexture("velocX", 0, velocX->getTexture());
		shader.setTexture("velocY", 1, velocY->getTexture());
		shader.setTexture("d0", 2, d0->getTexture());
		shader.setImmediate("dtx", dtx);
		shader.setImmediate("dty", dty);
		drawRect(0, 0, d->getWidth(), d->getHeight());
	}
	popBlend();
    popSurface();
	
#if TODO
    set_bnd2d(b, d, N);
#endif
}

struct FluidCube2d
{
	int size;

	float dt;
	float diff; // diffusion amount
	float visc; // viscosity

	Surface s;
	Surface density;
	
	Surface Vx;
	Surface Vy;
	Surface Vz;
	
	Surface Vx0;
	Surface Vy0;
	Surface Vz0;

	void addDensity(const int x, const int y, const float amount)
	{
		if (x < 0 || x >= size ||
			y < 0 || y >= size)
		{
			return;
		}
		
		pushSurface(&density);
		pushBlend(BLEND_ADD);
		{
			gxBegin(GX_POINTS);
			{
				gxColor4f(amount, amount, amount, amount);
				gxVertex2f(x, y);
			}
			gxEnd();
		}
		popBlend();
		popSurface();
	}
	
	void addVelocity(const int x, const int y, const float amountX, const float amountY)
	{
		if (x < 0 || x >= size ||
			y < 0 || y >= size)
		{
			return;
		}
		
		pushSurface(&Vx);
		pushBlend(BLEND_ADD);
		{
			gxBegin(GX_POINTS);
			{
				gxColor4f(amountX, amountX, amountX, amountX);
				gxVertex2f(x, y);
			}
			gxEnd();
		}
		popBlend();
		popSurface();
		
		pushSurface(&Vy);
		pushBlend(BLEND_ADD);
		{
			gxBegin(GX_POINTS);
			{
				gxColor4f(amountY, amountY, amountY, amountY);
				gxVertex2f(x, y);
			}
			gxEnd();
		}
		popBlend();
		popSurface();
	}

	void step()
	{
		pushBlend(BLEND_OPAQUE);
		{
			const int N = size;
		
			const int iter = 4;
		
			diffuse2d_xy(&Vx0, &Vx, &Vy0, &Vy, visc, dt, iter, N);
		
			project2d(&Vx0, &Vy0, &Vx, &Vy, iter, N);
		
			advect2d(1, &Vx, &Vx0, &Vx0, &Vy0, dt, N);
			advect2d(2, &Vy, &Vy0, &Vx0, &Vy0, dt, N);
		
			project2d(&Vx, &Vy, &Vx0, &Vy0, iter, N);
		
			diffuse2d(0, &s, &density, diff, dt, iter, N);
		
			advect2d(0, &density, &s, &Vx, &Vy, dt, N);
		}
		popBlend();
	}
};

FluidCube2d * createFluidCube2d(const int size, const float diffusion, const float viscosity, const float dt)
{
	FluidCube2d * cube = new FluidCube2d();

	cube->size = size;
	cube->dt = dt;
	cube->diff = diffusion;
	cube->visc = viscosity;

	// initialize surfaces
	
	SurfaceProperties surfaceProperties;
	surfaceProperties.dimensions.init(size, size);
	surfaceProperties.colorTarget.init(SURFACE_R32F, true);
	//surfaceProperties.colorTarget.setSwizzle(0, 0, 0, GX_SWIZZLE_ONE);
	
	cube->s.init(surfaceProperties);
	cube->density.init(surfaceProperties);

	cube->Vx.init(surfaceProperties);
	cube->Vy.init(surfaceProperties);

	cube->Vx0.init(surfaceProperties);
	cube->Vy0.init(surfaceProperties);
	
	// clear surfaces
	
	cube->s.clear();
	cube->density.clear();
	
	cube->Vx.clear();
	cube->Vy.clear();
	cube->Vx0.clear();
	cube->Vy0.clear();

	return cube;
}

int main(int argc, const char * argv[])
{
	if (!framework.init(600, 600))
		return -1;

	FluidCube2d * cube = createFluidCube2d(300, 0.001f, 0.0001f, 1.f / 30.f);

	GxTexture texture;
	texture.allocate(cube->size, cube->size, GX_R32_FLOAT, true, true);
	texture.setSwizzle(0, 0, 0, GX_SWIZZLE_ONE);
	
	mouse.showCursor(false);
	
	for (;;)
	{
		framework.process();

		if (framework.quitRequested)
			break;

		cube->density.mulf(.99f, .99f, .99f);
		
		for (int x = -4; x <= +4; ++x)
		{
			for (int y = -4; y <= +4; ++y)
			{
				cube->addDensity(mouse.x / SCALE + x, mouse.y / SCALE + y, .1f);
				cube->addVelocity(mouse.x / SCALE, mouse.y / SCALE, mouse.dx / 100.f, mouse.dy / 100.f);
			}
		}
		
		const auto t1 = g_TimerRT.TimeUS_get();
		
		cube->step();
		
		const auto t2 = g_TimerRT.TimeUS_get();
		
		//printf("step duration: %gms\n", (t2 - t1) / 1000.f);
		
		framework.beginDraw(255, 255, 255, 0);
		{
			gxScalef(SCALE, SCALE, 1);
			
			pushBlend(BLEND_OPAQUE);
			{
				//texture.upload(cube->density.data(), 4, 0);
				//gxSetTexture(texture.id);
				gxSetTexture(cube->density.getTexture());
				setColorClamp(false);
				//setColor(2000, 2000, 2000);
				setColor(colorWhite);
				drawRect(0, 0, cube->size, cube->size);
				setColorClamp(true);
				gxSetTexture(0);
			}
			popBlend();
			
		#if TODO
			pushBlend(BLEND_ADD);
			hqBegin(HQ_LINES);
			{
				setColor(30, 20, 10);
				
				for (int y = 0; y < cube->size; y += 4)
				{
					const int N = cube->size;
					
					for (int x = 0; x < cube->size; x += 4)
					{
						const float vx = cube->Vx[IX_2D(x, y)];
						const float vy = cube->Vy[IX_2D(x, y)];
						
						hqLine(x, y, 1.f, x + vx * 300.f, y + vy * 300.f, 1.f);
					}
				}
			}
			hqEnd();
			popBlend();
		#endif
		}
		framework.endDraw();
	}
	
	texture.free();

	delete cube;
	cube = nullptr;

	framework.shutdown();
	
	return 0;
}
