#include "fluidCube3d.h"
#include <math.h>
#include <string.h>

/*
https://mikeash.com/pyblog/fluid-simulation-for-dummies.html
Coding Challenge #132: Fluid Simulation
https://www.youtube.com/watch?v=alhpH6ECFvQ
*/

/*

todo : expperiment with the following boundary modes, and external forces,
from: http://karlsims.com/fluid-flow.html,

Zero: using a value of zero beyond the grid will avoid flow toward or away from the boundary, as if the fluid is contained in a box, because any edge cell's component of flow normal to the boundary would typically create a non-zero divergence and be removed. The divergence-removal examples above used this mode.
Repeat: repeating the flow value from the nearest edge cell will instead allow flow toward or away from the edges as if the fluid can exit or enter the grid.
Scaled repeat: combining zero and repeat edge-modes can also be useful. Using a scaled value of the nearest edge cell can give a soft boundary effect that slows down the flow at the edges but doesn't completely stop it. Alternatively, using zero for the flow component normal to the boundary, and repeat mode for the component parallel to the boundary, can give a more slippery edge effect.
Wrap: copying the flow value from the opposite side of the grid can create a wrap-around behavior where flow exiting on one side of the grid enters on the other.

Obstacles can also be added to the grid with similar boundary conditions by forcing the flow, or its normal component, to zero at their locations.

--

Realistic looking fluid behavior can be generated by alternating between the fluid momentum and divergence-removal steps described above. However some non-zero flow velocity needs to be set somehow, either procedurally or interactively. For example, adding linear flow at specific locations can create a squirting ink effect (see below), or tracking mouse or camera motion can be used to interactively push the fluid.

Other forces can be added to simulate various physical phenomena:

Gravity or buoyency can affect some parts of the fluid differently than others using a tracer image that represents the fluid density.
Damping or friction can reduce the flow velocity over time.
Viscosity can be simulated by diffusing the flow field slightly at each time step so the velocities become more like their neighbors. Note that the repeated resampling of the flow field will also cause a small amount of diffusion.
Cohesive forces can be approximated by using a tracer image to track different fluid substances, such as oil vs water, and then pushing the substances toward areas of the same type, moving convex boundaries inwards and concave boundaries outwards.

*/

#define IX_3D(x, y, z) ((x) + (y) * sizeX + (z) * sizeX * sizeY)

static void set_bnd3d(const int b, float * x, const int sizeX, const int sizeY, const int sizeZ)
{
    for(int j = 1; j < sizeY - 1; j++) {
        for(int i = 1; i < sizeX - 1; i++) {
        	const int N = sizeZ;
            x[IX_3D(i, j, 0  )] = b == 3 ? -x[IX_3D(i, j, 1  )] : x[IX_3D(i, j, 1  )];
            x[IX_3D(i, j, N-1)] = b == 3 ? -x[IX_3D(i, j, N-2)] : x[IX_3D(i, j, N-2)];
        }
    }

    for(int k = 1; k < sizeZ - 1; k++) {
        for(int i = 1; i < sizeX - 1; i++) {
        	const int N = sizeY;
            x[IX_3D(i, 0  , k)] = b == 2 ? -x[IX_3D(i, 1  , k)] : x[IX_3D(i, 1  , k)];
            x[IX_3D(i, N-1, k)] = b == 2 ? -x[IX_3D(i, N-2, k)] : x[IX_3D(i, N-2, k)];
        }
    }

    for(int k = 1; k < sizeZ - 1; k++) {
        for(int j = 1; j < sizeY - 1; j++) {
        	const int N = sizeX;
            x[IX_3D(0  , j, k)] = b == 1 ? -x[IX_3D(1  , j, k)] : x[IX_3D(1  , j, k)];
            x[IX_3D(N-1, j, k)] = b == 1 ? -x[IX_3D(N-2, j, k)] : x[IX_3D(N-2, j, k)];
        }
    }

	const int NX = sizeX;
	const int NY = sizeY;
	const int NZ = sizeZ;
	
    x[IX_3D(   0,    0,    0)] = 0.333f * (x[IX_3D(   1,    0,    0)] + x[IX_3D(   0,    1,    0)] + x[IX_3D(   0,    0,    1)]);
    x[IX_3D(   0, NY-1,    0)] = 0.333f * (x[IX_3D(   1, NY-1,    0)] + x[IX_3D(   0, NY-2,    0)] + x[IX_3D(   0, NY-1,    1)]);
    x[IX_3D(   0,    0, NZ-1)] = 0.333f * (x[IX_3D(   1,    0, NZ-1)] + x[IX_3D(   0,    1, NZ-1)] + x[IX_3D(   0,    0, NZ-1)]);
    x[IX_3D(   0, NY-1, NZ-1)] = 0.333f * (x[IX_3D(   1, NY-1, NZ-1)] + x[IX_3D(   0, NY-2, NZ-1)] + x[IX_3D(   0, NY-1, NZ-2)]);
    x[IX_3D(NX-1,    0,    0)] = 0.333f * (x[IX_3D(NX-2,    0,    0)] + x[IX_3D(NX-1,    1,    0)] + x[IX_3D(NX-1,    0,    1)]);
    x[IX_3D(NX-1, NY-1,    0)] = 0.333f * (x[IX_3D(NX-2, NY-1,    0)] + x[IX_3D(NX-1, NY-2,    0)] + x[IX_3D(NX-1, NY-1,    1)]);
    x[IX_3D(NX-1,    0, NZ-1)] = 0.333f * (x[IX_3D(NX-2,    0, NZ-1)] + x[IX_3D(NX-1,    1, NZ-1)] + x[IX_3D(NX-1,    0, NZ-2)]);
    x[IX_3D(NX-1, NY-1, NZ-1)] = 0.333f * (x[IX_3D(NX-2, NY-1, NZ-1)] + x[IX_3D(NX-1, NY-2, NZ-1)] + x[IX_3D(NX-1, NY-1, NZ-2)]);
}

static void lin_solve3d(const int b, float * __restrict x, const float * __restrict x0, const float a, const float c, const int iter, const int sizeX, const int sizeY, const int sizeZ)
{
    float cRecip = 1.f / c;

    for (int k = 0; k < iter; k++)
    {
        for (int m = 1; m < sizeZ - 1; m++)
        {
            for (int j = 1; j < sizeY - 1; j++)
            {
				int index = IX_3D(0, j, m);
				
            	const int step_x = 1;
            	const int step_y = sizeX;
            	const int step_z = sizeX * sizeY;
				
				const float * __restrict x0_line = x0 + index;
					  float * __restrict x_line  = x  + index;
			
				float prev_x = x_line[0];
			
			// note : we're updating x[] inside the loop while also reading from it. this isn't quite right and adds some directional bias. although it is, usually, a good trade-off speed and memory-wise
			
                for (int i = 1; i < sizeX - 1; i++, index++)
                {
				#if 1
					const float curr_x = x_line[i];
					
                    x_line[i] =
						(
							x0_line[i] +
								a *
                            	(
									+ (prev_x             + x_line[i + step_x])
									+ (x_line[i - step_y] + x_line[i + step_y])
									+ (x_line[i - step_z] + x_line[i + step_z])
								)
						) * cRecip;
					
					prev_x = curr_x;
				#else
					// note : we keep this verion around since it's easier to port to a shader
                    x[IX_3D(i, j, m)] =
						(x0[IX_3D(i, j, m)]
                            + a *
                            	(
									+ x[IX_3D(i+1, j  , m  )]
									+ x[IX_3D(i-1, j  , m  )]
									+ x[IX_3D(i  , j+1, m  )]
									+ x[IX_3D(i  , j-1, m  )]
									+ x[IX_3D(i  , j  , m+1)]
									+ x[IX_3D(i  , j  , m-1)]
								)
						) * cRecip;
				#endif
				}
            }
        }

        set_bnd3d(b, x, sizeX, sizeY, sizeZ);
    }
}

static void lin_solve3d_xyz(
	float * __restrict x, const float * __restrict x0,
	float * __restrict y, const float * __restrict y0,
	float * __restrict z, const float * __restrict z0,
	const float a,
	const float c,
	const int iter,
	const int sizeX,
	const int sizeY,
	const int sizeZ)
{
    float cRecip = 1.f / c;

    for (int k = 0; k < iter; k++)
    {
        for (int m = 1; m < sizeZ - 1; m++)
        {
            for (int j = 1; j < sizeY - 1; j++)
            {
				int index = IX_3D(0, j, m);
				
            	const int step_x = 1;
            	const int step_y = sizeX;
            	const int step_z = sizeX * sizeY;
				
				const float * __restrict x0_line = x0 + index;
					  float * __restrict x_line  = x  + index;
				
				const float * __restrict y0_line = y0 + index;
					  float * __restrict y_line  = y  + index;
				
				const float * __restrict z0_line = z0 + index;
					  float * __restrict z_line  = z  + index;
			
				float prev_x = x_line[0];
				float prev_y = y_line[0];
				float prev_z = z_line[0];
				
			// note : we're updating x[], y[] and z[] inside the loop while also reading from it. this isn't quite right and adds some directional bias. although it is, usually, a good trade-off speed and memory-wise
			
                for (int i = 1; i < sizeX - 1; i++)
                {
					const float curr_x = x_line[i];
					const float curr_y = y_line[i];
					const float curr_z = z_line[i];
					
                   x_line[i] =
						(
							x0_line[i] +
								a *
                            	(
									+ (x_line[i + step_x] +             prev_x)
									+ (x_line[i + step_y] + x_line[i - step_y])
									+ (x_line[i + step_z] + x_line[i - step_z])
								)
						) * cRecip;
					
                    y_line[i] =
						(
							y0_line[i] +
								a *
                            	(
									+ (y_line[i + step_x] +             prev_y)
									+ (y_line[i + step_y] + y_line[i - step_y])
									+ (y_line[i + step_z] + y_line[i - step_z])
								)
						) * cRecip;
					
                    z_line[i] =
						(
							z0_line[i] +
								a *
                            	(
									+ (z_line[i + step_x] +             prev_z)
									+ (z_line[i + step_y] + z_line[i - step_y])
									+ (z_line[i + step_z] + z_line[i - step_z])
								)
						) * cRecip;
					
					prev_x = curr_x;
					prev_y = curr_y;
					prev_z = curr_z;
                }
            }
        }

        set_bnd3d(1, x, sizeX, sizeY, sizeZ);
        set_bnd3d(2, y, sizeX, sizeY, sizeZ);
        set_bnd3d(3, z, sizeX, sizeY, sizeZ);
    }
}

static void diffuse3d(const int b, float * x, const float * x0, const float diff, const float dt, const int iter, const int sizeX, const int sizeY, const int sizeZ, const float voxelSize)
{
	const float a = dt * diff / (voxelSize * voxelSize);
	lin_solve3d(b, x, x0, a, 1 + 6 * a, iter, sizeX, sizeY, sizeZ);
}

static void diffuse3d_xyz(
	float * x, const float * x0,
	float * y, const float * y0,
	float * z, const float * z0,
	const float diff, const float dt, const int iter, const int sizeX, const int sizeY, const int sizeZ, const float voxelSize)
{
	const float a = dt * diff / (voxelSize * voxelSize);
	lin_solve3d_xyz(x, x0, y, y0, z, z0, a, 1 + 6 * a, iter, sizeX, sizeY, sizeZ);
}

static void project3d(
	float * __restrict velocX,
	float * __restrict velocY,
	float * __restrict velocZ,
	float * __restrict p,
	float * __restrict div,
	const int iter,
	const int sizeX,
	const int sizeY,
	const int sizeZ)
{
    for (int k = 1; k < sizeZ - 1; k++)
    {
        for (int j = 1; j < sizeY - 1; j++)
        {
        	int index = IX_3D(1, j, k);
			
        	const int step_x = 1;
        	const int step_y = sizeX;
        	const int step_z = sizeX * sizeY;
			
            for (int i = 1; i < sizeX - 1; i++, index++)
            {
                div[index] =
                	-0.25f *
						(
							+ velocX[index + step_x] - velocX[index - step_x]
							+ velocY[index + step_y] - velocY[index - step_y]
							+ velocZ[index + step_z] - velocZ[index - step_z]
                    	);
            }
        }
    }
	
    set_bnd3d(0, div, sizeX, sizeY, sizeZ);
	
    memset(p, 0, sizeX * sizeY * sizeZ * sizeof(float));
    lin_solve3d(0, p, div, 1, 6, iter, sizeX, sizeY, sizeZ);
	
    for (int k = 1; k < sizeZ - 1; k++)
    {
        for (int j = 1; j < sizeY - 1; j++)
        {
        	int index = IX_3D(1, j, k);
			
        	const int step_x = 1;
        	const int step_y = sizeX;
        	const int step_z = sizeX * sizeY;
			
            for (int i = 1; i < sizeX - 1; i++, index++)
            {
                velocX[index] -= ( p[index + step_x] - p[index - step_x] );
                velocY[index] -= ( p[index + step_y] - p[index - step_y] );
                velocZ[index] -= ( p[index + step_z] - p[index - step_z] );
            }
        }
    }
	
    set_bnd3d(1, velocX, sizeX, sizeY, sizeZ);
    set_bnd3d(2, velocY, sizeX, sizeY, sizeZ);
    set_bnd3d(3, velocZ, sizeX, sizeY, sizeZ);
}

static void advect3d(const int b, float * __restrict d, const float * __restrict d0, const float * velocX, const float * velocY, const float * velocZ, const float in_dt, const int sizeX, const int sizeY, const int sizeZ, const float voxelSize)
{
	const float dt = in_dt / voxelSize;
	
    const float x_max = sizeX - 1.5f;
    const float y_max = sizeY - 1.5f;
    const float z_max = sizeZ - 1.5f;
	
    float ifloat, jfloat, kfloat;
    int i, j, k;
	
    for (k = 1, kfloat = 1; k < sizeZ - 1; k++, kfloat++)
    {
        for (j = 1, jfloat = 1; j < sizeY - 1; j++, jfloat++)
        {
            for (i = 1, ifloat = 1; i < sizeX - 1; i++, ifloat++)
            {
                const float tmp1 = dt * velocX[IX_3D(i, j, k)];
                const float tmp2 = dt * velocY[IX_3D(i, j, k)];
                const float tmp3 = dt * velocZ[IX_3D(i, j, k)];
				
                float x = ifloat - tmp1;
                float y = jfloat - tmp2;
                float z = kfloat - tmp3;
				
                if(x < 0.5f) x = 0.5f; 
                if(x > x_max) x = x_max;
                const float i0 = floorf(x);
				
                if(y < 0.5f) y = 0.5f; 
                if(y > y_max) y = y_max;
                const float j0 = floorf(y);
				
                if(z < 0.5f) z = 0.5f;
                if(z > z_max) z = z_max;
                const float k0 = floorf(z);
				
                const float s1 = x    - i0;
                const float s0 = 1.0f - s1;
                const float t1 = y    - j0;
                const float t0 = 1.0f - t1;
                const float u1 = z    - k0;
                const float u0 = 1.0f - u1;
				
                const int i0i = (int)i0;
                const int i1i = i0 + 1;
                const int j0i = (int)j0;
                const int j1i = j0 + 1;
                const int k0i = (int)k0;
                const int k1i = k0 + 1;
				
				/*
                Assert(i0i >= 0 && i0i < N);
				Assert(i1i >= 0 && i1i < N);
				Assert(j0i >= 0 && j0i < N);
				Assert(j1i >= 0 && j1i < N);
				Assert(k0i >= 0 && k0i < N);
				Assert(k1i >= 0 && k1i < N);
				*/
				
                d[IX_3D(i, j, k)] =
					+ s0 *
						+ ( t0 * (u0 * d0[IX_3D(i0i, j0i, k0i)] + u1 * d0[IX_3D(i0i, j0i, k1i)])
                        + ( t1 * (u0 * d0[IX_3D(i0i, j1i, k0i)] + u1 * d0[IX_3D(i0i, j1i, k1i)])))
					+ s1 *
						+ ( t0 * (u0 * d0[IX_3D(i1i, j0i, k0i)] + u1 * d0[IX_3D(i1i, j0i, k1i)])
                        + ( t1 * (u0 * d0[IX_3D(i1i, j1i, k0i)] + u1 * d0[IX_3D(i1i, j1i, k1i)])));
            }
        }
    }
	
    set_bnd3d(b, d, sizeX, sizeY, sizeZ);
}

static void advect3d_xyz(
	float * __restrict _x, const float * __restrict x0,
	float * __restrict _y, const float * __restrict y0,
	float * __restrict _z, const float * __restrict z0,
	const float * velocX, const float * velocY, const float * velocZ,
	const float in_dt,
	const int sizeX,
	const int sizeY,
	const int sizeZ,
	const float voxelSize)
{
	const float dt = in_dt / voxelSize;
	
	const float x_max = sizeX - 1.5f;
	const float y_max = sizeY - 1.5f;
	const float z_max = sizeZ - 1.5f;
	
    float ifloat, jfloat, kfloat;
    int i, j, k;
	
    for (k = 1, kfloat = 1; k < sizeZ - 1; k++, kfloat++)
    {
        for (j = 1, jfloat = 1; j < sizeY - 1; j++, jfloat++)
        {
            for (i = 1, ifloat = 1; i < sizeX - 1; i++, ifloat++)
            {
            	const int index = IX_3D(i, j, k);
				
                const float tmp1 = dt * velocX[index];
                const float tmp2 = dt * velocY[index];
                const float tmp3 = dt * velocZ[index];
				
                float x = ifloat - tmp1;
                float y = jfloat - tmp2;
                float z = kfloat - tmp3;
				
                if(x < 0.5f) x = 0.5f;
                if(x > x_max) x = x_max;
                const float i0 = floorf(x);
				
                if(y < 0.5f) y = 0.5f;
                if(y > y_max) y = y_max;
                const float j0 = floorf(y);
				
                if(z < 0.5f) z = 0.5f;
                if(z > z_max) z = z_max;
                const float k0 = floorf(z);
				
                const float s1 = x    - i0;
                const float s0 = 1.0f - s1;
                const float t1 = y    - j0;
                const float t0 = 1.0f - t1;
                const float u1 = z    - k0;
                const float u0 = 1.0f - u1;
				
                const int i0i = (int)i0;
                const int i1i = i0 + 1;
                const int j0i = (int)j0;
                const int j1i = j0 + 1;
                const int k0i = (int)k0;
                const int k1i = k0 + 1;
				
				/*
                Assert(i0i >= 0 && i0i < N);
				Assert(i1i >= 0 && i1i < N);
				Assert(j0i >= 0 && j0i < N);
				Assert(j1i >= 0 && j1i < N);
				Assert(k0i >= 0 && k0i < N);
				Assert(k1i >= 0 && k1i < N);
				*/
				
				const int i000 = IX_3D(i0i, j0i, k0i);
				const int i010 = IX_3D(i0i, j1i, k0i);
				const int i001 = IX_3D(i0i, j0i, k1i);
				const int i011 = IX_3D(i0i, j1i, k1i);
				
				const int i100 = IX_3D(i1i, j0i, k0i);
				const int i101 = IX_3D(i1i, j0i, k1i);
				const int i110 = IX_3D(i1i, j1i, k0i);
				const int i111 = IX_3D(i1i, j1i, k1i);
				
                _x[index] =
					+ s0 *
						+ ( t0 * (u0 * x0[i000] + u1 * x0[i001])
                        + ( t1 * (u0 * x0[i010] + u1 * x0[i011])))
					+ s1 *
						+ ( t0 * (u0 * x0[i100] + u1 * x0[i101])
                        + ( t1 * (u0 * x0[i110] + u1 * x0[i111])));
				
				_y[index] =
					+ s0 *
						+ ( t0 * (u0 * y0[i000] + u1 * y0[i001])
                        + ( t1 * (u0 * y0[i010] + u1 * y0[i011])))
					+ s1 *
						+ ( t0 * (u0 * y0[i100] + u1 * y0[i101])
                        + ( t1 * (u0 * y0[i110] + u1 * y0[i111])));
				
				_z[index] =
					+ s0 *
						+ ( t0 * (u0 * z0[i000] + u1 * z0[i001])
                        + ( t1 * (u0 * z0[i010] + u1 * z0[i011])))
					+ s1 *
						+ ( t0 * (u0 * z0[i100] + u1 * z0[i101])
                        + ( t1 * (u0 * z0[i110] + u1 * z0[i111])));
            }
        }
    }
	
    set_bnd3d(1, _x, sizeX, sizeY, sizeZ);
    set_bnd3d(2, _y, sizeX, sizeY, sizeZ);
    set_bnd3d(3, _z, sizeX, sizeY, sizeZ);
}

//

void FluidCube3d::addDensity(const int x, const int y, const int z, const float amount)
{
	if (x < 0 || x >= sizeX ||
		y < 0 || y >= sizeY ||
		z < 0 || z >= sizeZ)
	{
		return;
	}
	
	const int index = IX_3D(x, y, z);
	
	density[index] += amount;
}

void FluidCube3d::addVelocity(const int x, const int y, const int z, const float amountX, const float amountY, const float amountZ)
{
	if (x < 0 || x >= sizeX ||
		y < 0 || y >= sizeY ||
		z < 0 || z >= sizeZ)
	{
		return;
	}
	
	const int index = IX_3D(x, y, z);

	Vx[index] += amountX;
	Vy[index] += amountY;
	Vz[index] += amountZ;
}

void FluidCube3d::step()
{
    diffuse3d_xyz(Vx0.data(), Vx.data(), Vy0.data(), Vy.data(), Vz0.data(), Vz.data(), visc, dt, iter, sizeX, sizeY, sizeZ, voxelSize);
	
	project3d(Vx0.data(), Vy0.data(), Vz0.data(), Vx.data(), Vy.data(), iter, sizeX, sizeY, sizeZ);
	
	advect3d_xyz(
		Vx.data(), Vx0.data(),
		Vy.data(), Vy0.data(),
		Vz.data(), Vz0.data(),
		Vx0.data(), Vy0.data(), Vz0.data(),
		dt,
		sizeX, sizeY, sizeZ,
		voxelSize);

	project3d(Vx.data(), Vy.data(), Vz.data(), Vx0.data(), Vy0.data(), iter, sizeX, sizeY, sizeZ);
	
	diffuse3d(0, s.data(), density.data(), diff, dt, iter, sizeX, sizeY, sizeZ, voxelSize);
	
    advect3d(0, density.data(), s.data(), Vx.data(), Vy.data(), Vz.data(), dt, sizeX, sizeY, sizeZ, voxelSize);
}

//

FluidCube3d * createFluidCube3d(const int sizeX, const int sizeY, const int sizeZ, const float diffusion, const float viscosity, const float dt)
{
	FluidCube3d * cube = new FluidCube3d();

	cube->sizeX = sizeX;
	cube->sizeY = sizeY;
	cube->sizeZ = sizeZ;
	cube->dt = dt;
	cube->diff = diffusion;
	cube->visc = viscosity;

	const int N = sizeX * sizeY * sizeZ;

	cube->s.resize(N, 0.f);
	cube->density.resize(N, 0.f);

	cube->Vx.resize(N, 0.f);
	cube->Vy.resize(N, 0.f);
	cube->Vz.resize(N, 0.f);

	cube->Vx0.resize(N, 0.f);
	cube->Vy0.resize(N, 0.f);
	cube->Vz0.resize(N, 0.f);

	return cube;
}
