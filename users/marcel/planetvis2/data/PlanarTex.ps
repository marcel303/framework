include engine/ShaderPS.txt

shader_in vec3 v_normal;
shader_in vec2 v_texcoord;
shader_in flat int v_textureIndex;

uniform sampler2DArray u_texture;
uniform float lod;
uniform float numLods;

uniform float debugCubeSideIndex;
uniform float debugColors;

vec4 planarTextureLod(int index, vec2 uv, int lod)
{
#if 1
	return textureLod(u_texture, vec3(uv, index), lod);
#else
	if (index == 0) return vec4(1.0, 0.0, 0.0, 1.0);
	if (index == 1) return vec4(0.0, 1.0, 0.0, 1.0);
	if (index == 2) return vec4(0.0, 0.0, 1.0, 1.0);
	if (index == 3) return vec4(1.0, 1.0, 0.0, 1.0);
	if (index == 4) return vec4(0.0, 1.0, 1.0, 1.0);
	if (index == 5) return vec4(1.0, 0.0, 1.0, 1.0);
#endif
	return vec4(0.0);
}

void main()
{
	vec4 color = vec4(0.0);
	
	int textureIndex = v_textureIndex;

	//if (lod >= 0.0)
	if (false)
	{
		color = planarTextureLod(textureIndex, v_texcoord, int(lod));
	}
	else if (false)
	{
		float numUsed = 0.0;
		for (int i = 0; i < int(numLods); ++i)
		{
			vec4 texcolor = planarTextureLod(textureIndex, v_texcoord, i);
			color += texcolor;
			numUsed += texcolor.a;
		}
		if (numUsed != 0.0)
			color /= numUsed;
		//color /= numLods;
		color.a = 1.0;
	}
	else
	{
		for (int i = 0; i < int(numLods); ++i)
		{
			color = planarTextureLod(textureIndex, v_texcoord, i);
			if (color.a != 0.0)
			{
				//color = color / color.a;
				//color.rgb /= (1.0 + i / float(numLods) * 2.0);
				break;
			}
		}
	}
	
	if (debugColors != 0.0 && false)
	{
		color.rb = v_texcoord.xy;
		color.g = 0.2;
		color.a = 1.0;
	}
	
	if (debugCubeSideIndex >= 0.0 && textureIndex != int(debugCubeSideIndex))
		color.a = 0.0;
	
	//color = vec4(v_texcoord.xy, 0.0, 1.0);
	
	shader_fragColor = color;
}
