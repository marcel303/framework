include engine/ShaderPS.txt
include engine/builtin-hq-common.txt

shader_in vec3 v_edgePlane1;
shader_in vec3 v_edgePlane2;
shader_in vec3 v_edgePlane3;
shader_in vec3 v_edgePlane4;
shader_in float v_strokeSize;
shader_in vec4 v_color;

float computeDistance(vec2 p)
{
	float d1 = dot(v_edgePlane1, vec3(p, 1.0));
	float d2 = dot(v_edgePlane2, vec3(p, 1.0));
	float d3 = dot(v_edgePlane3, vec3(p, 1.0));
	float d4 = dot(v_edgePlane4, vec3(p, 1.0));
	
	float d = max(max(max(d1, d2), d3), d4);
	
	return d;
}

float distanceFade(float distance)
{
	return clamp(v_strokeSize - abs(distance), 0.0, 1.0);
}

void main()
{
	float v = 0.0;
	
	float d = abs(computeDistance(v_p));
	
	if (d > v_strokeSize + 1.0 && enableOptimizations)
	{
		v = 0.0;
	}
	else
	{
		v = sampleDistanceFunction(v_p);
	}

	vec4 color = hqColor(v, v_color);
	
	shader_fragColor = color;
}
