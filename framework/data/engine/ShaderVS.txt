include engine/ShaderCommon.txt

// vertex streams

shader_attrib vec4 in_position4            VS_POSITION
shader_attrib vec3 in_normal               VS_NORMAL
shader_attrib vec4 in_color                VS_COLOR
shader_attrib vec2 in_texcoord0            VS_TEXCOORD0
shader_attrib vec2 in_texcoord1            VS_TEXCOORD1

#define in_position in_position4.xyz

// OpenGL constants

#if VS_USE_LEGACY_MATRICES
	#define ModelViewMatrix           gl_ModelViewMatrix
	#define ModelViewProjectionMatrix gl_ModelViewProjectionMatrix
	#define ProjectionMatrix          gl_ProjectionMatrix
#else
	uniform mat4 ModelViewMatrix;
	uniform mat4 ModelViewProjectionMatrix;
	uniform mat4 ProjectionMatrix;
#endif

// functions

// todo : remove objectToWorld, or add a WorldMatrix uniform
//        which isn't really possible ..

vec4 objectToWorld(vec4 v)
{
	return ModelViewMatrix * v;
}

vec4 objectToView(vec4 v)
{
	return ModelViewMatrix * v;
}

vec3 objectToView3(vec3 v)
{
	return (ModelViewMatrix * vec4(v, 0.0)).xyz;
}

vec4 objectToProjection(vec4 v)
{
	return ModelViewProjectionMatrix * v;
}

vec4 worldToProjection(vec4 v)
{
	return ProjectionMatrix * v;
}

vec4 viewToProjection(vec4 v)
{
	return ProjectionMatrix * v;
}

vec4 unpackPosition()
{
	return vec4(in_position, 1.0);
}

vec4 unpackNormal()
{
	return vec4(in_normal, 0.0);
}

vec4 unpackColor()
{
#if LEGACY_GL
	return gl_Color;
#else
	return in_color;
#endif
}

vec2 unpackTexcoord(int index)
{
#if LEGACY_GL
	if (index == 0) return gl_MultiTexCoord0.xy;
	if (index == 1) return gl_MultiTexCoord1.xy;
#else
	if (index == 0) return in_texcoord0;
	if (index == 1) return in_texcoord1;
#endif
	return vec2(0.0, 0.0);
}
