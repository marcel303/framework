include engine/ShaderPS.txt

shader_in vec2 texcoord;
uniform sampler2D source;
uniform float kernelSize;
uniform float radius;

uniform vec4 weights[32] buffer filterKernel;

// todo : optimize getWeight function

float getWeight(int i)
{
	vec4 v = weights[i / 4];

	i = i & 3;

	if (i == 0)
		return v.x;
	else if (i == 1)
		return v.y;
	else if (i == 2)
		return v.z;
	else
		return v.w;
}

void main()
{
    float texScale = radius / float(textureSize(source, 0).y) / (kernelSize - 1.0);
	
	vec4 result = texture(source, texcoord) * getWeight(0);
	
	for (int i = 1; i < int(kernelSize); ++i)
	{
		result += texture(source, texcoord + vec2(0.0, texScale * float(i))) * getWeight(i);
		result += texture(source, texcoord - vec2(0.0, texScale * float(i))) * getWeight(i);
	}
	
    shader_fragColor = result;
}
